<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于CSS自定义属性var()的那些事儿~</title>
      <link href="/2019/05/16/CSSStudy/CSSVariable/"/>
      <url>/2019/05/16/CSSStudy/CSSVariable/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>在这里，我先给<code>var()</code>正个名，我们平常都叫它<code>CSS变量</code>，然而它实际上却不叫做<code>CSS变量</code>，而是叫做<strong>CSS自定义属性</strong>,即<code>CSS Custom Property</code>，以下分别摘自<code>w3.org</code>和<code>MDN</code>：</p><blockquote><p>This module introduces cascading variables as a new primitive value type that is accepted by all CSS properties, and custom properties for defining them.       ——  <a href="https://www.w3.org/TR/css-variables-1/" target="_blank" rel="noopener">w3.org</a></p><p>The var() CSS function can be used to insert the value of a custom property (sometimes called a “CSS variable”) instead of any part of a value of another property.      ——  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/var" target="_blank" rel="noopener">MDN</a></p></blockquote><p>虽然在<code>MDN</code>中有提及<code>sometimes called a &quot;CSS variable&quot;</code>，但是它应该叫做<code>CSS自定义属性</code>而不是<code>CSS变量</code>。</p><h3 id="如何声明一个CSS自定义属性？"><a href="#如何声明一个CSS自定义属性？" class="headerlink" title="如何声明一个CSS自定义属性？"></a>如何声明一个CSS自定义属性？</h3><p>在声明的时候我们需要在自定义属性名前添加两条横线<code>--</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--border-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">--text-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码的意思是：我们在<code>:root</code>作用域中声明了两个自定义属性，分别是<code>--border-color</code>和<code>--text-color</code>。</p><p>为什么在CSS的自定义属性中，使用的是两条横向<code>--</code>而不是其他的如<code>$</code>或者<code>@</code>，是因为这几个前缀被<code>Sass</code>和<code>Less</code>使用了，官方为了避免引起冲突和误解，使用了<code>--</code>。</p><p><strong>需要注意的是，css的自定义属性名对大小写敏感，也就是说<code>--color</code>和<code>--Color</code>是两个自定义属性。</strong></p><h3 id="在CSS自定义属性中我们可以存入哪些值？"><a href="#在CSS自定义属性中我们可以存入哪些值？" class="headerlink" title="在CSS自定义属性中我们可以存入哪些值？"></a>在CSS自定义属性中我们可以存入哪些值？</h3><p>在CSS中的各种值都可以放入CSS自定义属性中，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">--rgba-color</span>: <span class="built_in">rgba</span>(255, 0, 0);</span><br><span class="line">    <span class="attribute">--px</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">--border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">--padding</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">--line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">--durations</span>: .<span class="number">5s</span>;</span><br><span class="line">    <span class="attribute">--text</span>: <span class="string">"text"</span>;</span><br><span class="line">    <span class="attribute">--calc-top</span>: <span class="built_in">calc</span>(100vh - 44px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，CSS中的各种值都是可以放入CSS自定义属性中的。</p><h3 id="var-函数"><a href="#var-函数" class="headerlink" title="var()函数"></a>var()函数</h3><p>通过<code>var()</code>函数读取一个CSS自定义属性，然后代替元素中的任何属性中的值的任何部分，但是<code>var()</code>函数不能作为一个属性名、选择器或者其他除了属性值之外的值，例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">--hello-world</span>: <span class="string">"margin-top"</span>;</span><br><span class="line">    var(--hello-world): 1px solid red;/*错误，不能用做属性名*/</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">--margin-top</span>: 20;</span><br><span class="line">    <span class="selector-tag">margin-top</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--margin-top</span>)<span class="selector-tag">px</span>;<span class="comment">/*错误，如何自定义属性值是数值，不能与数值单位直接连用*/</span></span><br><span class="line">    <span class="selector-tag">margin-top</span>: <span class="selector-tag">calc</span>(<span class="selector-tag">var</span>(<span class="selector-tag">--margin-top</span>) * 1<span class="selector-tag">px</span>);<span class="comment">/*正确，若为数值，需要通过calc()函数连接使用*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">--padding-top</span>: "20<span class="selector-tag">px</span>";</span><br><span class="line">    <span class="selector-tag">padding-top</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--padding-top</span>);<span class="comment">/*错误，若带有单位，则不能写为字符串*/</span></span><br><span class="line">    <span class="selector-tag">--padding-bottom</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">padding-bottom</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--padding-bottom</span>);<span class="comment">/*正确*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">--border-color</span>: <span class="selector-id">#ff0000</span>;</span><br><span class="line">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">var</span>(<span class="selector-tag">--border-color</span>);<span class="comment">/*正确，替换属性值的部分的值的时候中间不能加入其他符号，需要用空格进行分隔*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span>(<span class="selector-tag">--hello-world</span>) &#123;</span><br><span class="line">    <span class="comment">/*错误，不能用做选择器*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>var()</code>函数有一个方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span>( &lt;<span class="selector-tag">custom-property-name</span>&gt; , &lt;<span class="selector-tag">declaration-value</span>&gt;? )</span><br></pre></td></tr></table></figure><p>第一个参数为自定义属性的名称，第二个参数为回退值，即当第一个参数引用的自定义属性无效（未声明、声明的值错误）情况下，则使用第二个参数的值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">--color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--color, blue);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">div标签：&lt;div&gt;蓝色&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/05/16/CSSStudy/CSSVariable/3.png" width="300"></p><p>在上面的例子中，我们在<code>span</code>作用域中声明了一个<code>--color: red</code>自定义属性，值为<code>red</code>，当我们在<code>div</code>选择器中使用时无法获取到<code>span</code>作用域的自定义属性，所以被判定为无效的，然后就会使用回退值，所以<code>div</code>标签的<code>color</code>属性的值为<code>blue</code>，作用域我们将在下面的内容中讲解。</p><h3 id="css自定义属性的作用域"><a href="#css自定义属性的作用域" class="headerlink" title="css自定义属性的作用域"></a>css自定义属性的作用域</h3><p>同一个CSS自定义属性名可以在多个选择器内声明及赋值，当元素在读取CSS自定义属性的时候会根据优先级最高声明，类似于<code>CSS层叠(CSS Cascade)</code>的规则。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">        <span class="attribute">--color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">--color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#blue</span> &#123;</span><br><span class="line">        <span class="attribute">--color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    p标签：&lt;p&gt;红色&lt;/p&gt;</span><br><span class="line">    div标签：&lt;div&gt;绿色&lt;/div&gt;</span><br><span class="line">    id为blue的div标签：&lt;div id="blue"&gt;蓝色&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/05/16/CSSStudy/CSSVariable/0.png" width="300"></p><p>我们可以看到，在上面的代码中的<code>:root</code>、<code>div</code>、<code>id</code>三个选择器的作用域中都声明了<code>--color</code>自定义属性，但是当不同的元素在获取自定义属性的时候，都会采用优先级最高的那个，所以这三个标签中的文字的<code>color</code>都是不同的。其中<code>:root</code>是根作用域，通常将全局自定义属性在该作用域中声明，以确保所有选择器都可以读取。</p><p>同时，我们也可以知道了，CSS自定义属性只在他的作用域内生效：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">--body-color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">--div-color</span>: green;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--span-color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">--span-color</span>: red;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--span-color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--body-color);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    div标签：&lt;div&gt;蓝色&lt;/div&gt;</span><br><span class="line">    p标签：&lt;p&gt;绿色&lt;/p&gt;</span><br><span class="line">    span标签：&lt;span&gt;红色&lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/05/16/CSSStudy/CSSVariable/1.png" width="300"></p><p>从上面的例子中，我们可以发现：</p><ol><li>子元素可以使用父元素作用域中的自定义属性值，即<code>body</code>作用域中定义了一个<code>--body-color: green</code>的自定义属性，在<code>p</code>元素中使用这个自定义属性值的时候是可以获取的。</li><li>兄弟元素无法获取对方作用域中的自定义属性的值，<code>div</code>元素使用<code>span</code>元素作用域中声明的自定义属性时，会因为作用域不同的原因，只能使用在<code>*</code>选择器中的<code>color</code>属性的值。</li></ol><h3 id="通过JavaScript操作CSS自定义属性"><a href="#通过JavaScript操作CSS自定义属性" class="headerlink" title="通过JavaScript操作CSS自定义属性"></a>通过JavaScript操作CSS自定义属性</h3><p>我们可以通过<code>JavaScript</code>的<code>CSS.supports</code>属性检测当前浏览器是否支持CSS自定义属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSupported =</span><br><span class="line">  <span class="built_in">window</span>.CSS &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.CSS.supports &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.CSS.supports(<span class="string">'--a'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isSupported) &#123;</span><br><span class="line">  <span class="comment">/* supported */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* not supported */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JavaScript</code>中操作CSS自定义属性的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.setProperty(<span class="string">'--color'</span>, <span class="string">'#ff0000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.getPropertyValue(<span class="string">'--color'</span>).trim();</span><br><span class="line"><span class="comment">// '#ff0000'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.removeProperty(<span class="string">'--color'</span>);</span><br></pre></td></tr></table></figure><p>上面的代码的意思是给<code>body</code>元素的作用域中设置一个<code>--color: #ff0000</code>的CSS自定义属性，然后并读取、删除它。</p><p>这就使得我们可以向CSS自定义属性中添加任何值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.style.setProperty(<span class="string">'--color'</span>, <span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure><p>上面的代码在CSS中是无效的值，但是我们可以通过<code>JavaScript</code>进行读写操作，也就是说CSS自定义属性能够实现<code>JavaScript</code>和<code>CSS</code>之间的通信。</p>]]></content>
      
      
      <categories>
          
          <category> CSS学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;补&gt;如何使用hexo命令行写一篇文章</title>
      <link href="/2019/05/16/blog/write-blog/"/>
      <url>/2019/05/16/blog/write-blog/</url>
      
        <content type="html"><![CDATA[<h3 id="常用的Hexo指令"><a href="#常用的Hexo指令" class="headerlink" title="常用的Hexo指令"></a>常用的Hexo指令</h3><p><code>Hexo</code>的常用指令均可在<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">官网</a>中查看</p><ol><li><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><p>用于初始化、新建一个网站，如果不写<code>folder</code>，则在当前目录下初始化。</p></li><li><p>新建一篇文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如果未设置<code>layout</code>，则使用<code>_config.yml</code>中的<code>default_layout</code>参数设置，如果新建的标题中带有空格，需使用<code>&quot;&quot;</code>将标题括起。该指令有简写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li><p>生成静态文件，即我们常说的打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>键入命令并执行之后会在你的网站目录下生成一个<code>public</code>目录，即打包出来的静态资源文件均存储于此，该指令可以简写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>其中可以在后方加入一些选项：</p><p>| 选项             | 选项                             |<br>| —————- | ——————————– |<br>| <code>-d</code>，<code>--deploy</code> | 静态资源文件生成之后立即部署网站 |<br>| <code>-w</code>，<code>--watch</code>  | 监视文件变动                     |</p></li><li><p>启动网站的本地服务器，一般用于预览网站内容，默认情况下访问网址为：<code>http://localhost:4000</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ol><p>   可以在启动服务器的时候添加参数</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>，<code>--port</code></td><td>设置端口号</td></tr><tr><td><code>-s</code>，<code>--static</code></td><td>仅使用静态文件</td></tr><tr><td><code>-l</code>，<code>--log</code></td><td>记录日志，同时覆盖旧日志</td></tr></tbody></table><p>   该命令可以简写为：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ol start="5"><li><p>部署网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>| 选项               | 描述                           |<br>| —————— | —————————— |<br>| <code>-g</code>，<code>--generate</code> | 部署网站内容之前先生成静态资源 |</p><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><h3 id="通过hexo-n生成的md文件如何设置标签、分类、简介"><a href="#通过hexo-n生成的md文件如何设置标签、分类、简介" class="headerlink" title="通过hexo n生成的md文件如何设置标签、分类、简介"></a>通过hexo n生成的md文件如何设置标签、分类、简介</h3><p>一般通过<code>hexo n</code>命令生成的md文件中，在文件的最顶部会有三个属性<code>title</code>、<code>date</code>、<code>tags</code>，这三个分别对应<code>文章标题</code>，<code>文章创建日期</code>，<code>文章标签</code>。如果你在之前的<code>Hexo</code>设置中开启了<code>分类</code>即<code>categories</code>，则可以在虚线之上新起一行，添加一个属性<code>categories</code>，这个时候你的这篇文章就有了分类。如果添加<code>description</code>则可以为文章添加简介，如果没有简介则在<code>Hexo</code>主页中会显示文章的全文，添加简介后只显示简介。其中，仅有<code>tags</code>和<code>categories</code>属性可以使用<code>[]</code>方括号，其他属性均不允许使用，否则会在部署的时候报错。</p><p><code>tags</code>和<code>categories</code>的用法一致，需要使用<code>[]</code>将标签名、分类名包裹起来，其中通过<code>,</code>（英文的逗号）隔开。</p><p>其他属性直接输入字符串就好了。</p><p><img src="/2019/05/16/blog/write-blog/0.png" width="600"></p><hr><p>然后在本文的最后，推荐一款<code>markdown</code>编辑器<code>Typora</code>。<a href="https://typora.io/" target="_blank" rel="noopener">官网and下载地址</a></p><p><img src="/2019/05/16/blog/write-blog/1.png" width="600"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter学习日志03</title>
      <link href="/2019/05/13/FlutterStudy/flutter03/"/>
      <url>/2019/05/13/FlutterStudy/flutter03/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter的布局方式"><a href="#Flutter的布局方式" class="headerlink" title="Flutter的布局方式"></a>Flutter的布局方式</h3><p>在<code>Flutter</code>中，所有布局都是基于<code>Widdget</code>进行的，因为对于<code>Flutter</code>而言，任何东西都是一个<code>Widdget</code>，不论是布局模型、图像、文本等等，还是我们看不到的东西比如行<code>row</code>、列<code>column</code>等等都是一个<code>Widdget</code>。</p><p>如果我们想构建一个复杂的<code>Widdget</code>，可以通过多个不同的简单<code>Widdget</code>组合而成，</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习日志02</title>
      <link href="/2019/05/06/FlutterStudy/flutter02/"/>
      <url>/2019/05/06/FlutterStudy/flutter02/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在本文中我仅介绍Android Studio创建一个Flutter应用，不考虑其他IDE</p></blockquote><h3 id="Flutter应用初体验"><a href="#Flutter应用初体验" class="headerlink" title="Flutter应用初体验"></a>Flutter应用初体验</h3><ol><li><p>创建应用</p><ol><li><p>点击<code>File -&gt; New  -&gt; New Flutter Project</code>新建一个<code>flutter</code>应用</p><p><img src="/2019/05/06/FlutterStudy/flutter02/0.png" width="400"></p></li><li><p>选择<code>Flutter Application</code>创建一个<code>Flutter</code>应用程序</p><p><img src="/2019/05/06/FlutterStudy/flutter02/1.png" width="400"></p></li><li><p>修改<code>Project name</code>来设置你自己的工程的名称、<code>SDK</code>路径、工程路径以及简介</p><p><img src="/2019/05/06/FlutterStudy/flutter02/2.png" width="400"></p></li><li><p>修改<code>Company domain</code>的名称</p><p><img src="/2019/05/06/FlutterStudy/flutter02/3.png" width="400"></p></li><li><p>点击<code>Finish</code>完成创建</p></li></ol></li><li><p>运行<code>Flutter</code>程序</p><ol><li><p>添加并启动一个<code>AVD</code>虚拟机</p><ol><li><p>点击右上角小手机按钮打开虚拟机管理界面，或者点击菜单栏中的<code>Tools -&gt; AVD Manager</code>打开虚拟机管理界面</p><p><img src="/2019/05/06/FlutterStudy/flutter02/4.png"></p><p><img src="/2019/05/06/FlutterStudy/flutter02/4-2.png"></p></li><li><p>在虚拟机管理界面中点击<code>Create Virtual Device...</code>按钮添加一个虚拟机</p><p><img src="/2019/05/06/FlutterStudy/flutter02/5.png" width="600"></p></li><li><p>选择并创建一台设备，点击<code>Next</code>进入下一步</p><p><img src="/2019/05/06/FlutterStudy/flutter02/6.png" width="600"></p></li><li><p>选择一个系统镜像，我这里是因为之前提前下载好了<code>Android 9.+</code>的系统镜像，如果要选择其他的镜像请根据个人需求选择下载，点击<code>Next</code>进入下一步</p><p><img src="/2019/05/06/FlutterStudy/flutter02/7.png" width="600"></p></li><li><p>在虚拟机配置中开启硬件加速<code>Hardware-GLES 2.0</code>，点击<code>Show Advanced Settings</code>显示高级设置，在<code>Emulated Performance</code>中的<code>Graphics</code>选项中选择<code>Hardware-GLES 2.0</code>，点击<code>Finish</code>完成虚拟机的创建</p><p><img src="/2019/05/06/FlutterStudy/flutter02/8.png" width="600"></p></li><li><p>在虚拟机列表中点击<code>Actions</code>标签下的三角形图标启动虚拟机，到此虚拟机创建以及启动的教程结束。</p><p><img src="/2019/05/06/FlutterStudy/flutter02/10.png" width="300"></p></li></ol></li><li><p>启动<code>Flutter</code>应用</p><ol><li><p>在<code>AVD</code>虚拟机已经启动的情况下，点击<code>Android Studio</code>右上角的绿色三角形运行<code>Flutter</code>程序，或者点击菜单栏中的<code>Run -&gt; Run &#39;main.dart&#39;</code>运行<code>Flutter</code>程序</p><p><img src="/2019/05/06/FlutterStudy/flutter02/11.png"></p></li><li><p>当<code>AVD</code>虚拟机中出现上图所示程序界面的时候，说明我们的<code>Flutter</code>程序能够正常运行</p></li></ol></li><li><p>编写我们的<code>Hello World!</code>程序</p><ol><li><p>在第二步中我们创建的<code>Flutter</code>程序中不难看出，<code>flutter_app/lib/main.dart</code>是<code>Flutter</code>程序的主文件即入口文件，我们替换该文件中的所有代码，替换成以下代码（我们先不讲<code>Dart</code>语法以及<code>Flutter API</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">//主函数（入口函数），下面我会简单说说Dart的函数</span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">// 声明MyApp类</span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  //重写build方法</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    //返回一个Material风格的组件</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Welcome to Flutteraa&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        //创建一个Bar，并添加文本</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(&apos;Welcome to Flutter&apos;),</span><br><span class="line">        ),</span><br><span class="line">        //在主体的中间区域，添加一个hello world 的文本</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(&apos;Hello World&apos;),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们保存修改的时候，模拟器中的程序界面应该已经变成了<code>Hello World</code>，如下图：</p><p><img src="/2019/05/06/FlutterStudy/flutter02/12.png" width="300"></p></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习日志01</title>
      <link href="/2019/05/05/FlutterStudy/flutter01/"/>
      <url>/2019/05/05/FlutterStudy/flutter01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在掘金看大神的文章时突然看到关于<code>Flutter</code>的介绍，一瞬间觉得这个比<code>weex</code>要强大太多了，然后就开始了<code>Flutter</code>的学习之旅，本文是我在观看<a href="https://jspang.com" target="_blank" rel="noopener">@技术胖</a>前辈的<a href="https://jspang.com/posts/2019/01/20/flutter-base.html" target="_blank" rel="noopener">教学视频</a>以及学习了<a href="https://jspang.com/posts/2019/01/20/flutter-base.html" target="_blank" rel="noopener">教程</a>之后的学习记录，这是该系列的第一篇，该系列我会保持一天一更，记录我每天的学习进度。</p><hr><h4 id="什么是Flutter"><a href="#什么是Flutter" class="headerlink" title="什么是Flutter"></a>什么是Flutter</h4><p>在<a href="https://flutterchina.club" target="_blank" rel="noopener">Flutter中文网</a>中是这样介绍<code>Flutter</code>的：</p><blockquote><p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</p></blockquote><p>通过官网介绍，我们可以简单的了解到<code>Flutter</code>是一个<strong>开源的</strong>、<strong>跨平台(iOS和Android)的</strong>、<strong>移动UI框架</strong>，官方对其的特点归纳为以下几个：</p><ol><li><p>快速开发：</p><p>毫秒级的热重载，修改后，您的应用界面会立即更新。使用丰富的、完全可定制的widget在几分钟内构建原生界面。</p></li><li><p>富有表现力和灵活的UI</p><p>快速发布聚焦于原生体验的功能。分层的架构允许您完全自定义，从而实现难以置信的快速渲染和富有表现力、灵活的设计。</p></li><li><p>原生性能</p><p>Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</p></li></ol><h3 id="windows下配置Flutter环境"><a href="#windows下配置Flutter环境" class="headerlink" title="windows下配置Flutter环境"></a>windows下配置Flutter环境</h3><p>因为我只有windows环境，所以mac以及linux环境暂不讨论；其中编辑器仅讨论<code>Android Studio</code>，其他如<code>VSCode</code>等IDE暂不讨论。</p><p>在配置之前我们需要提前准备好以下：</p><ol><li><code>Git命令行工具</code></li><li><code>Flutter SDK</code></li><li><code>Java jdk</code></li><li><code>Android Studio</code></li></ol><h5 id="1-安装Git-for-Windows"><a href="#1-安装Git-for-Windows" class="headerlink" title="1. 安装Git for Windows"></a>1. 安装Git for Windows</h5><p>因为<code>Flutter</code>依赖<code>Git命令行工具</code>即<code>Git for Windows</code>，所以需要提前安装好<code>Git for Windows</code>，并且确保能够在<code>CMD</code>和<code>PowerShell</code>中能运行<code>Git</code>命令，否则在之后的步骤中运行<code>flutter doctor</code>时将会出现<code>Unable to find git in your PATH</code>的错误。</p><h5 id="2-配置Flutter-SDK"><a href="#2-配置Flutter-SDK" class="headerlink" title="2. 配置Flutter SDK"></a>2. 配置Flutter SDK</h5><ol><li><p>下载最新的<a href="https://flutter.dev/docs/development/tools/sdk/releases#windows" target="_blank" rel="noopener">安装包</a></p><ul><li>最新的安装包请从<a href="https://flutter.dev" target="_blank" rel="noopener">Flutter官网</a>中自行下载，天朝的各位可能需要科学上网打开这个可能不存在的网站，也可以在<code>Flutter</code>的<a href="https://github.com/flutter/flutter" target="_blank" rel="noopener">GitHub项目</a>中获取最新的<a href="https://github.com/flutter/flutter/releases" target="_blank" rel="noopener">安装包</a></li></ul></li><li><p>将安装包<code>zip文件</code>解压到对应的路径，如<code>C:\src\flutter</code>，注意，<strong>不要将Flutter安装到需要一些高权限的目录中，如<code>C:\Program Files\</code></strong></p></li><li><p>在<code>Flutter</code>的解压根目录下双击运行<code>flutter_console.bat</code>脚本文件，就可以在打开的命令行窗口中运行<code>Flutter</code>命令了</p><ul><li><p>因为在<code>Flutter</code>中有部分命令需要联网获取数据，大家都知道连接的是不存在的网站，所以我们需要提前配置好用户环境变量，在<code>控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 用户变量</code>中新建两个变量<code>PUB_HOSTED_URL</code>和<code>FLUTTER_STORAGE_BASE_URL</code>。<strong>对大陆的用户来说，这步非常重要，如果未配置则会影响之后的开发</strong></p><ul><li><p><code>PUB_HOSTED_URL</code> = <code>https://pub.flutter-io.cn</code></p></li><li><p><code>FLUTTER_STORAGE_BASE_URL</code> =  <code>https://storage.flutter-io.cn</code></p><p><img src="/2019/05/05/FlutterStudy/flutter01/0.png" width="400"></p><p><img src="/2019/05/05/FlutterStudy/flutter01/1.png" width="400"></p></li></ul></li></ul></li><li><p>如果需要在<code>CMD</code>或者<code>PowerShell</code>中运行<code>flutter</code>命令，则需要在用户环境变量中添加相关变量</p><p><img src="/2019/05/05/FlutterStudy/flutter01/2.png" width="400"></p><ul><li>在“用户变量”下检查是否有名为<code>Path</code>的条目：<ul><li>如果该条目存在, 追加<code>%FLUTTER_HOME%\bin</code>的全路径，使用<code>;</code>作为分隔符</li><li>如果条目不存在, 创建一个新用户变量<code>Path</code>，然后将<code>%FLUTTER_HOME%\bin</code>的全路径作为它的值</li></ul></li></ul><p>最后重启Windows让该环境变量生效</p></li></ol><h5 id="3-运行flutter-doctor"><a href="#3-运行flutter-doctor" class="headerlink" title="3. 运行flutter doctor"></a>3. 运行<code>flutter doctor</code></h5><p>打开一个新的<code>CMD</code>或者<code>PowerShell</code>命令行窗口并输入以下命令是否完成<code>flutter</code>的安装</p><p><img src="/2019/05/05/FlutterStudy/flutter01/3.png" width="400"></p><p>如果没有红色的<code>x</code>到此就完成<code>Flutter</code>的安装了</p><hr><p>今天的内容暂时到此为止，明天将更新解决<code>flutter doctor</code>的部分错误以及安装的坑</p><hr><h5 id="2019年5月6日补充的内容"><a href="#2019年5月6日补充的内容" class="headerlink" title="2019年5月6日补充的内容"></a>2019年5月6日补充的内容</h5><p>响了一下，大家可能最常见的也是碰到最多的问题应该是在第一次运行<code>Flutter</code>的时候卡在<code>Resovle...</code>阶段，然后等了很长一段时间之后控制台报错，其中在日志中有一句信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessException: Process <span class="string">"你的flutter工程路径\flutter_app\android\gradlew.bat"</span> exited abnormally:</span><br></pre></td></tr></table></figure><p>这个报错的原因是因为天朝的墙太厚了，看不到拿不到墙外面的东西，解决这个问题请参考本文中<code>配置Flutter SDK</code>下的第3点中的配置信息，即在环境变量中新建两个变量<code>PUB_HOSTED_URL</code>和<code>FLUTTER_STORAGE_BASE_URL</code>，<strong>对大陆的用户来说，这步非常重要，如果未配置则会影响之后的开发</strong></p><ul><li><code>PUB_HOSTED_URL</code> = <code>https://pub.flutter-io.cn</code></li><li><code>FLUTTER_STORAGE_BASE_URL</code> =  <code>https://storage.flutter-io.cn</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas实现渐变色环形进度条</title>
      <link href="/2019/04/09/components/ProgressBarComponent/ProgreeBar/"/>
      <url>/2019/04/09/components/ProgressBarComponent/ProgreeBar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近的项目用到一个渐变色的环形进度条，原本说要百度一个（我承认我懒），然后发现，都不是自己需要的_(:зゝ∠)_，没办法，撸起袖子整一个出来吧。</p></blockquote><p>先上一个图！</p><p><img src="/2019/04/09/components/ProgressBarComponent/ProgreeBar/0.gif" alt="img"></p><h4 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h4><p>首先我们需要在<code>html</code>页面中添加一个<code>canvas</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们实现<code>canvas</code>的绘制过程。</p><p>其实这个圆环就是绘制两个圆然后叠加在一起，灰色的放在底下，带颜色的放在上边</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取canvas元素</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> width = canvas.width;</span><br><span class="line"><span class="keyword">let</span> height = canvas.height;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> circleObj = &#123;</span><br><span class="line">    ctx: ctx,</span><br><span class="line">    <span class="comment">/*圆心*/</span></span><br><span class="line">    x: width / <span class="number">2</span>,</span><br><span class="line">    y: width / <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/*半径*/</span></span><br><span class="line">    radius: width / <span class="number">2</span> - <span class="number">10</span>,<span class="comment">//半径比canvas宽的一半要小</span></span><br><span class="line">    <span class="comment">/*环的宽度*/</span></span><br><span class="line">    lineWidth: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*灰色的圆环*/</span></span><br><span class="line">circleObj.startAngle = <span class="built_in">Math</span>.PI * <span class="number">2</span>;</span><br><span class="line">circleObj.endAngle = <span class="built_in">Math</span>.PI * <span class="number">2</span> / <span class="number">4</span>; <span class="comment">// 对应 360° 的 1/4 即 90°</span></span><br><span class="line">circleObj.color = <span class="string">'#e9e9e9'</span>;</span><br><span class="line">drawCircle(circleObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*有色的圆环*/</span></span><br><span class="line"><span class="comment">/*开始的度数-从上一个结束的位置开始*/</span></span><br><span class="line">circleObj.startAngle = circleObj.endAngle;</span><br><span class="line"><span class="comment">/*结束的度数 Math.PI * 2 */</span></span><br><span class="line">circleObj.endAngle = <span class="built_in">Math</span>.PI * <span class="number">2</span>;</span><br><span class="line">circleObj.color = <span class="string">"#dd6200"</span>;</span><br><span class="line">drawCircle(circleObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*画曲线*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params">circleObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = circleObj.ctx;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(circleObj.x, circleObj.y, circleObj.radius, circleObj.startAngle, circleObj.endAngle, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//设定曲线粗细度</span></span><br><span class="line">    ctx.lineWidth = circleObj.lineWidth;</span><br><span class="line">    <span class="comment">//给曲线着色</span></span><br><span class="line">    ctx.strokeStyle = circleObj.color;</span><br><span class="line">    <span class="comment">//连接处样式</span></span><br><span class="line">    ctx.lineCap = <span class="string">'round'</span>;</span><br><span class="line">    <span class="comment">//给环着色</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们可以到页面上看一下效果</p><p><img src="/2019/04/09/components/ProgressBarComponent/ProgreeBar/0.png" width="300"></p><p>为什么跟我们最终的效果差距那么大？渐变色呢？而且进度条的起点位置也不对啊？这些问题让我们一个个解决。</p><ol><li><p>调整起始点位置</p><p>因为在<code>canvas</code>中绘制一个圆形，起点并不在圆形的顶部，而是在时钟3点方向，然后顺时针绘制，在w3c中解释如下：</p><p><img src="/2019/04/09/components/ProgressBarComponent/ProgreeBar/1.png" width="700"></p><p>所以我们需要对这个圆进行选装，逆时针旋转90°，但是又因为在<code>canvas</code>中要进行旋转只能对画布进行旋转，所以我们需要修改圆的圆心以及画布旋转的中心点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/*开始圆环*/</span></span><br><span class="line"><span class="keyword">let</span> circleObj = &#123;</span><br><span class="line">    ctx: ctx,</span><br><span class="line">    <span class="comment">/*圆心*/</span></span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/*半径*/</span></span><br><span class="line">    radius: width / <span class="number">2</span> - <span class="number">10</span>, <span class="comment">//半径比canvas宽的一半要小</span></span><br><span class="line">    <span class="comment">/*环的宽度*/</span></span><br><span class="line">    lineWidth: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ctx.translate(width / <span class="number">2</span>, height / <span class="number">2</span>); <span class="comment">// 将画布原点移动到中心位置</span></span><br><span class="line">ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>); <span class="comment">// 旋转-90°</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>到此页面显示的如下：</p><p><img src="/2019/04/09/components/ProgressBarComponent/ProgreeBar/2.png" width="300"></p><p>这个时候起点的位置的确已经移动到圆的顶部了，可是进度条的绘制方向不对啊，怎么逆时针画了，其实这是因为我们先画了灰色的圆再花有色的圆，然后通过改变灰色的圆的终点改变有色的圆的绘制起点，所以看起来就像是反着绘制圆了，解决这个的方法很简单，我们把圆在Y轴上翻转180°就好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/*开始圆环*/</span></span><br><span class="line"><span class="keyword">let</span> circleObj = &#123;</span><br><span class="line">    ctx: ctx,</span><br><span class="line">    <span class="comment">/*圆心*/</span></span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/*半径*/</span></span><br><span class="line">    radius: width / <span class="number">2</span> - <span class="number">10</span>, <span class="comment">//半径比canvas宽的一半要小</span></span><br><span class="line">    <span class="comment">/*环的宽度*/</span></span><br><span class="line">    lineWidth: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ctx.translate(width / <span class="number">2</span>, height / <span class="number">2</span>); <span class="comment">// 将画布原点移动到中心位置</span></span><br><span class="line">ctx.scale(<span class="number">-1</span>, <span class="number">1</span>); <span class="comment">// 翻转180°</span></span><br><span class="line">ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>); <span class="comment">// 旋转-90°</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个时候再看一下页面就跟我们想要的一致了：</p><p><img src="/2019/04/09/components/ProgressBarComponent/ProgreeBar/3.png" width="300"></p><p><strong>记得在调整画布中心点之后，圆的圆心应该为(0, 0)</strong></p></li><li><p>设置渐变色</p><p>在<code>canvas</code>中设置渐变色需要使用<code>createLinearGradient</code>这个API，并添加起止位置的颜色，我们在有色圆环绘制的代码块下添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/*有色的圆环*/</span></span><br><span class="line"><span class="comment">/*开始的度数-从上一个结束的位置开始*/</span></span><br><span class="line">circleObj.startAngle = circleObj.endAngle;</span><br><span class="line"><span class="comment">/*结束的度数 Math.PI * 2 */</span></span><br><span class="line">circleObj.endAngle = <span class="built_in">Math</span>.PI * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grd = ctx.createLinearGradient(width / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, height);</span><br><span class="line">grd.addColorStop(<span class="number">0</span>, _this.startColor);</span><br><span class="line">grd.addColorStop(<span class="number">1</span>, _this.endColor);</span><br><span class="line"></span><br><span class="line">circleObj.color = grd;</span><br><span class="line">drawCircle(circleObj);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个时候进度条的颜色应该变成渐变的黄色</p><p><img src="/2019/04/09/components/ProgressBarComponent/ProgreeBar/4.png" width="300"></p></li></ol><p>到了这里，基本这个渐变的环形进度条就已经完成了，接下来，我们要让这个进度条动起来。</p><h4 id="进度条动画的实现"><a href="#进度条动画的实现" class="headerlink" title="进度条动画的实现"></a>进度条动画的实现</h4><p>为了实现进度条的动画，我们要先明白增长的是哪个圆？之前我们是先通过缩短灰色的圆实现有色的圆的增长，那么灰色的圆最开始应该是<code>360°</code>，这样相对的有色的圆就是<code>0°</code>，由此，我们可以通过减少灰色的圆的度数实现有色的圆的度数的增长，即进度条长度的增加。</p><p>通过<code>window.requestAnimationFrame</code>API可以快速的实现一个逐帧动画。</p><p>以下就是加上逐帧动画之后的完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> width = canvas.width;</span><br><span class="line"><span class="keyword">let</span> height = canvas.height;</span><br><span class="line"></span><br><span class="line">ctx.translate(width / <span class="number">2</span>, height / <span class="number">2</span>); <span class="comment">// 将画布原点移动到中心位置</span></span><br><span class="line">ctx.scale(<span class="number">-1</span>, <span class="number">1</span>); <span class="comment">// 翻转180°</span></span><br><span class="line">ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>); <span class="comment">// 旋转-90°</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置最开始灰色的圆为360°即 Math.PI * 2</span></span><br><span class="line"><span class="keyword">let</span> defaultAngle = <span class="built_in">Math</span>.PI * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">animate();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逐帧动画</span></span><br><span class="line">    defaultAngle -= <span class="number">0.15</span>; <span class="comment">// 这个值可以根据个人需要修改</span></span><br><span class="line">    <span class="comment">// 因为我们设置的是灰色的圆的角度，对应的就是有色的圆的度数，即假设灰色的圆90°(1/4)的时候，有色的圆占比就为3/4</span></span><br><span class="line"></span><br><span class="line">    draw();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (defaultAngle &lt;= <span class="built_in">Math</span>.PI * <span class="number">2</span> * (<span class="number">1</span> - <span class="number">3</span> / <span class="number">4</span>)) &#123;</span><br><span class="line">        draw(); <span class="comment">// 当动画结束的时候再绘制一次</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 为了避免每次绘制的时候出现一些奇奇怪怪的问题，比如拖影之类的，每次绘制之前清空一次绘布</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> circleObj = &#123;</span><br><span class="line">        ctx: ctx,</span><br><span class="line">        <span class="comment">/*圆心*/</span></span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">/*半径*/</span></span><br><span class="line">        radius: width / <span class="number">2</span> - <span class="number">10</span>,<span class="comment">//半径比canvas宽的一半要小</span></span><br><span class="line">        <span class="comment">/*环的宽度*/</span></span><br><span class="line">        lineWidth: <span class="number">10</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*灰色的圆环*/</span></span><br><span class="line">    circleObj.startAngle = <span class="built_in">Math</span>.PI * <span class="number">2</span>;</span><br><span class="line">    circleObj.endAngle = defaultAngle; <span class="comment">// 对应 360° 的 1/4 即 90°</span></span><br><span class="line">    circleObj.color = <span class="string">'#e9e9e9'</span>;</span><br><span class="line">    drawCircle(circleObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*有色的圆环*/</span></span><br><span class="line">    <span class="comment">/*开始的度数-从上一个结束的位置开始*/</span></span><br><span class="line">    circleObj.startAngle = circleObj.endAngle;</span><br><span class="line">    <span class="comment">/*结束的度数 Math.PI * 2 */</span></span><br><span class="line">    circleObj.endAngle = <span class="built_in">Math</span>.PI * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> grd = ctx.createLinearGradient(width / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, height);</span><br><span class="line">    grd.addColorStop(<span class="number">0</span>, <span class="string">"#fff400"</span>);</span><br><span class="line">    grd.addColorStop(<span class="number">1</span>, <span class="string">"#dd6200"</span>);</span><br><span class="line"></span><br><span class="line">    circleObj.color = grd;</span><br><span class="line">    drawCircle(circleObj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*画曲线*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params">circleObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = circleObj.ctx;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(circleObj.x, circleObj.y, circleObj.radius, circleObj.startAngle, circleObj.endAngle, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//设定曲线粗细度</span></span><br><span class="line">    ctx.lineWidth = circleObj.lineWidth;</span><br><span class="line">    <span class="comment">//给曲线着色</span></span><br><span class="line">    ctx.strokeStyle = circleObj.color;</span><br><span class="line">    <span class="comment">//连接处样式</span></span><br><span class="line">    ctx.lineCap = <span class="string">'round'</span>;</span><br><span class="line">    <span class="comment">//给环着色</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><img src="/2019/04/09/components/ProgressBarComponent/ProgreeBar/1.gif" width="300"></p>]]></content>
      
      
      <categories>
          
          <category> vue组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在vue中如何实现一个发送请求的遮罩</title>
      <link href="/2019/04/09/components/IndicatorComponent/indicator/"/>
      <url>/2019/04/09/components/IndicatorComponent/indicator/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近的项目需要自定义一个能在<code>axios</code>发送请求的时候显示的遮罩，然后顺手写了一个简单的组件出来，在任何地方都可以使用；通过<code>Vue.extend()</code>实现。</p></blockquote><h4 id="Vue-extend-是什么？"><a href="#Vue-extend-是什么？" class="headerlink" title="Vue.extend()是什么？"></a>Vue.extend()是什么？</h4><p><code>Vue.extend</code>是一个<strong>扩展实例构造器</strong>，也就是说这是一个可以预设部分属性的Vue实例构造器，主要作用是用来生成组件。</p><h4 id="如何创建一个Vue-extend"><a href="#如何创建一个Vue-extend" class="headerlink" title="如何创建一个Vue.extend()"></a>如何创建一个Vue.extend()</h4><p>创建一个<code>Vue.extend</code>我们需要传入一个参数<code>options</code>，这个参数是一个包含创建<code>component</code>组件选项的对象，在<code>Vue.extend</code>中<code>data</code>必须是函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mount-point"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造器</span></span><br><span class="line"><span class="keyword">var</span> Profile = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">'Walter'</span>,</span><br><span class="line">      lastName: <span class="string">'White'</span>,</span><br><span class="line">      alias: <span class="string">'Heisenberg'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 Profile 实例，并挂载到一个元素上。</span></span><br><span class="line"><span class="keyword">new</span> Profile().$mount(<span class="string">'#mount-point'</span>)</span><br></pre></td></tr></table></figure><p>页面显示结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Walter White aka Heisenberg&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="实现一个Indicator"><a href="#实现一个Indicator" class="headerlink" title="实现一个Indicator"></a>实现一个Indicator</h4><p>通过上文我们可以实现一个简单的<code>Vue.extend</code>实例，但是在<code>axios</code>中实现需要进行一些改动。</p><p>在<code>axios</code>配置中我们需要只能通过调用方法的方式显示遮罩所以我们需要在一个js文件中编写显示遮罩和隐藏遮罩的函数。</p><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">indicator</span><br><span class="line">    |---- index.js # 入口文件</span><br><span class="line">    |---- indicator.vue # vue组件</span><br><span class="line">    |---- loading.gif # 用到的gif图</span><br></pre></td></tr></table></figure><p>首先我们在<code>indicator.vue</code>文件中实现一个全屏遮罩以及我们的loading图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-loading"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">v-if</span>=<span class="string">"visible"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-loading-back"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./loading.gif"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"ui-loading"</span>,</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="javascript">      visible: &#123; <span class="comment">//控制loading显隐</span></span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .ui-loading &#123;</span></span><br><span class="line"><span class="undefined">    position: fixed;</span></span><br><span class="line"><span class="undefined">    top: 0;</span></span><br><span class="line"><span class="undefined">    left: 0;</span></span><br><span class="line"><span class="undefined">    right: 0;</span></span><br><span class="line"><span class="undefined">    bottom: 0;</span></span><br><span class="line"><span class="undefined">    background-color: rgba(0, 0, 0, .7);</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">    z-index: 9999;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .ui-loading-back &#123;</span></span><br><span class="line"><span class="undefined">    width: 150px;</span></span><br><span class="line"><span class="undefined">    height: 150px;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .ui-loading-back &gt; img &#123;</span></span><br><span class="line"><span class="undefined">    width: 150px;</span></span><br><span class="line"><span class="undefined">    height: 150px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .fade-enter-active, .fade-leave-active &#123;</span></span><br><span class="line"><span class="undefined">    transition: all .5s;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .fade-enter, .fade-leave-to &#123;</span></span><br><span class="line"><span class="undefined">    height: 0;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个组件其实很简单，就做了一个背景透明度为0.7的页面，并在页面水平垂直居中了一个gif图。</p><p>然后我们开始编写最重要的入口文件<code>index.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span> <span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">'./loading.vue'</span> <span class="comment">// 引入要动态创建的vue模板</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Indicator = Vue.extend(Loading); <span class="comment">// 创建一个Vue的“子类”</span></span><br><span class="line"><span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  open() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Indicator(&#123;</span><br><span class="line">        el: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (instance.visible) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(instance.$el);</span><br><span class="line"></span><br><span class="line">    Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      instance.visible = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  close() &#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      instance.visible = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们就可以通过模块引入的方式使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在axios拦截配置文件中添加</span></span><br><span class="line"><span class="keyword">import</span> Indicator <span class="keyword">from</span> <span class="string">"@/component/indicator"</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截</span></span><br><span class="line">    instance.interceptors.request.use(</span><br><span class="line">      res =&gt; &#123;</span><br><span class="line">        <span class="comment">// 显示遮罩</span></span><br><span class="line">        Indicator.open();</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">...</span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line">    instance.interceptors.response.use(</span><br><span class="line">      response =&gt; &#123;</span><br><span class="line">        <span class="comment">// 隐藏遮罩</span></span><br><span class="line">        Indicator.close();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果需要在vue页面中使用，方式跟上面的相似。</p><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="/2019/04/09/components/IndicatorComponent/indicator/0.gif" alt="示例图"></p>]]></content>
      
      
      <categories>
          
          <category> vue组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mini版网易云音乐for electron-vue开发日志1</title>
      <link href="/2019/03/25/NeteseCloudMusic/MiniApp/day1/"/>
      <url>/2019/03/25/NeteseCloudMusic/MiniApp/day1/</url>
      
        <content type="html"><![CDATA[<h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>依旧是这个问题，太头疼了的一个问题，因为API服务器是用的<a href="https://github.com/Binaryify" target="_blank" rel="noopener">@Binaryify</a>的<a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="noopener">GitHub项目</a>，我放到我的阿里云服务器上直接用<code>pm2</code>启动后就不管了，然后尝试了在<code>google</code>和<code>baidu</code>中搜到的方案(也许真正的方案我没搜到)，发现都没办法，然后干脆给<code>axios</code>设置的一个<code>baseURL</code>（不是因为我懒），毕竟我的所有请求都发向我的服务器地址，所以也算是一个解决方案吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">"服务器地址"</span>;</span><br><span class="line">Vue.http = Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure><h3 id="解决本地测试的界面比build之后的界面较小"><a href="#解决本地测试的界面比build之后的界面较小" class="headerlink" title="解决本地测试的界面比build之后的界面较小"></a>解决本地测试的界面比build之后的界面较小</h3><p>最开始一直在本地开发以及测试，然后发现我build然后运行后，整个界面，包括字体、宽高等等的样式全部变大了，尝试在<code>src/main/index.js</code>中修改视窗比例后发现无效，在某不存在的网站<code>google</code>上搜到了一个解决方案，这个方案来自<a href="http://bigxiangbaobao.com" target="_blank" rel="noopener">这是地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> devInnerHeight = <span class="number">1080.0</span> <span class="comment">// 开发时的InnerHeight</span></span><br><span class="line"><span class="keyword">let</span> devDevicePixelRatio = <span class="number">1.0</span><span class="comment">// 开发时的devicepixelratio</span></span><br><span class="line"><span class="keyword">let</span> devScaleFactor = <span class="number">1</span> <span class="comment">// 开发时的ScaleFactor</span></span><br><span class="line"><span class="keyword">let</span> scaleFactor = <span class="built_in">require</span>(<span class="string">'electron'</span>).screen.getPrimaryDisplay().scaleFactor</span><br><span class="line"><span class="keyword">let</span> zoomFactor = (<span class="built_in">window</span>.innerHeight / devInnerHeight) * (<span class="built_in">window</span>.devicePixelRatio / devDevicePixelRatio) * (devScaleFactor / scaleFactor)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron'</span>).webFrame.setZoomFactor(zoomFactor)</span><br></pre></td></tr></table></figure><p>这里修改需要在<code>src/renderer/main.js</code>内添加</p>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 网易云音乐 </tag>
            
            <tag> electron-vue </tag>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue刮刮乐组件</title>
      <link href="/2019/03/06/components/ScratchComponent/Scratch/"/>
      <url>/2019/03/06/components/ScratchComponent/Scratch/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为之前的项目中有用到h5小游戏，其中有一个就是刮刮乐，正好canvas最近用的次数很多，想了想，就用canvas写一个吧。</p></blockquote><h5 id="一、演示图"><a href="#一、演示图" class="headerlink" title="一、演示图"></a>一、演示图</h5><p>先上一个演示，就不把演示放到文末了。</p><p><img src="/2019/03/06/components/ScratchComponent/Scratch/scratch-demo.gif" width="300"></p><h5 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h5><p>其实刮刮乐算是<code>canvas</code>中入门的一种使用了，简单地说实现的过程，用<code>canvas</code>绘制一个灰色的涂层，然后监听<code>mousedown</code>、<code>mousemove</code>和<code>mouseup</code>事件，在移动端中则是监听<code>touchstart</code>、<code>touchmove</code>和<code>touchend</code>事件，这个过程就是我们“刮开”刮刮乐的过程了。那么这么设计的页面中，实际有两层，第一层当然是我们的灰色的涂层啦，第二层就是我们的中奖文字或者中奖图片。</p><h5 id="三、开始"><a href="#三、开始" class="headerlink" title="三、开始"></a>三、开始</h5><ol><li><p>首先我们需要在页面上先绘制一个canvas“涂层”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个canvas --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">"185"</span>&gt;</span></span><br><span class="line">很遗憾你的浏览器不支持canvas</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着，咱们给这个涂层上个色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取我们canvas元素</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);  </span><br><span class="line"><span class="comment">//设置一个上下文为"2d"的画布</span></span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始绘制一个涂满灰色的矩形，其中宽高为canvas的宽高</span></span><br><span class="line">ctx.save();</span><br><span class="line">ctx.fillStyle = <span class="string">"#666"</span>;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">ctx.restore();</span><br></pre></td></tr></table></figure><p>这个时候你应该能在你的页面上看到一个灰色的涂层了</p><p><img src="/2019/03/06/components/ScratchComponent/Scratch/gray-canvas.png" width="300"></p></li><li><p>接下来，我们开始实现“刮开”这一个过程了，这个过程思路很简单，我在这里以移动端做举例：</p><ol><li>手指按下按在屏幕上，这个时候监听到<code>touchstart</code>事件</li><li>在<code>touchstart</code>事件里再监听<code>touchmove</code>事件用以判断手指头是否在屏幕上滑动</li><li>根据我们手指的路径去“清除”canvas中画好的灰色图层</li><li>最后在手指离开屏幕触发<code>touchend</code>事件的时候判断我们清除了多少的像素，达到一定比例直接隐藏涂层</li></ol><p>思路理清了，咱们开始吧！</p><p>因为要考虑同时兼容pc端和移动端，所以我们需要考虑设备信息是哪种设备</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> device = <span class="regexp">/android|iphone|ipad|ipod|webos|iemobile|opear mini|linux/i</span>.test(navigator.userAgent.toLowerCase());  <span class="comment">//判断是否是移动设备</span></span><br><span class="line"><span class="keyword">let</span> startEvtName = device ? <span class="string">"touchstart"</span> : <span class="string">"mousedown"</span>;</span><br><span class="line"><span class="keyword">let</span> moveEvtName = device ? <span class="string">"touchmove"</span> : <span class="string">"mousemove"</span>;</span><br><span class="line"><span class="keyword">let</span> endEvtName = device ? <span class="string">"touchend"</span> : <span class="string">"mouseup"</span>;</span><br></pre></td></tr></table></figure><p>接下来我们编写清楚涂层的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//获取鼠标或者手指距离屏幕的x坐标</span></span><br><span class="line">        <span class="keyword">let</span> x = device ? event.targetTouches[<span class="number">0</span>].clientX : event.clientX;</span><br><span class="line">        <span class="comment">//获取鼠标或者手指距离屏幕的y坐标</span></span><br><span class="line">        <span class="keyword">let</span> y = device ? event.targetTouches[<span class="number">0</span>].clientY : event.clientY;</span><br><span class="line">        <span class="comment">//获取canvas元素相对于视窗的位置</span></span><br><span class="line">        <span class="keyword">let</span> bbox = canvas.getBoundingClientRect();</span><br><span class="line">        <span class="comment">//开始绘制涂抹动作的canvas</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        <span class="comment">//canvas的globalCompositeOperation属性指的是canvas中的合成操作</span></span><br><span class="line">        <span class="comment">//将该属性设置为"destination-out"会将在与canvas源不重叠的区域上保留目标，其他部分都变成透明</span></span><br><span class="line">        ctx.globalCompositeOperation = <span class="string">"destination-out"</span>;</span><br><span class="line">        <span class="comment">//因为要模拟手机涂抹过程，所以涂抹的图形选择圆形，在这里绘制一个原型，半径为20px</span></span><br><span class="line">        ctx.arc(x - bbox.left, y - bbox.top, <span class="number">20</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        ctx.fill();</span><br><span class="line">        ctx.closePath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们开始监听鼠标或者手指触发的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听开始即鼠标按下或者手指触摸时的事件</span></span><br><span class="line">canvas.addEventListener(startEvtName, (e) =&gt; &#123;</span><br><span class="line">    <span class="comment">//用于判断鼠标/手指是否触摸涂层</span></span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//监听鼠标移动或者手指移动的事件，同时调用clear函数清楚图层</span></span><br><span class="line">    canvas.addEventListener(moveEvtName, clear, <span class="literal">false</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这里设置好之后我们就可以开始实现刮开的动作了</p><p><img src="/2019/03/06/components/ScratchComponent/Scratch/scratch-clear.gif" width="300"></p><p>但是在刮开涂层的过程中我们会发现，假如页面有滚动条，我们会拖着页面一起滚动，那我们来解决这个问题吧！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas.addEventListener(startEvtName, (e) =&gt; &#123;</span><br><span class="line">    <span class="comment">//禁止会引起屏幕滚动的事件</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="comment">//用于判断鼠标/手指是否触摸涂层</span></span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    canvas.addEventListener(moveEvtName, clear, <span class="literal">false</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>我们通过<code>e.preventDefault()</code>来禁用屏幕滚动，这下我们再刮开涂层试试，是不是就不会滚动了？</p><p>接下来，我们来实现当刮开一定面积的涂层的时候涂层自动消失</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听鼠标弹起或者手指离开屏幕的事件</span></span><br><span class="line">canvas.addEventListener(endEvtName, () =&gt; &#123;</span><br><span class="line">    <span class="comment">//用于判断鼠标/手指是否触摸涂层</span></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//获取canvas全部的像素点，这里需要用到getImageData方法</span></span><br><span class="line">    <span class="comment">//getImageData(int x,int y,int width,int height)：该方法获取canvas上从(x,y)点开始，宽为width、高为height的图片区域的数据，该方法返回的是一个CanvasPixelArray对象，该对象具有width、height、data等属性。data属性为一个数组，该数组每4个元素对应一个像素点。</span></span><br><span class="line">    <span class="keyword">let</span> imageDate = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="comment">//记录整个canvas所有像素点</span></span><br><span class="line">    <span class="keyword">let</span> allPX = imageDate.width * imageDate.height;</span><br><span class="line">    <span class="comment">//记录刮开的像素点个数</span></span><br><span class="line">    <span class="keyword">let</span> iNum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//通过for循环判断刮开了多少个像素点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allPX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (imageDate.data[i * <span class="number">4</span> + <span class="number">3</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            iNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当刮开的像素点数量大于等于总像素点数量的40%时隐藏canvas</span></span><br><span class="line">    <span class="keyword">if</span> (iNum &gt;= allPX / <span class="number">2.5</span>) &#123;</span><br><span class="line">        canvas.style.display = <span class="string">"none"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ol><h5 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h5><p>具体怎么移植到vue里我就不做介绍啦~感谢大家看到这里，有什么我讲不清楚的麻烦在评论区给我留个言！！！</p><p>最后再次感谢大家！</p>]]></content>
      
      
      <categories>
          
          <category> vue组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueStudy</title>
      <link href="/2019/03/04/JavaScript/VUE/VueStudy/"/>
      <url>/2019/03/04/JavaScript/VUE/VueStudy/</url>
      
        <content type="html"><![CDATA[<h5 id="一、name值没写对引起的死循环"><a href="#一、name值没写对引起的死循环" class="headerlink" title="一、name值没写对引起的死循环"></a>一、name值没写对引起的死循环</h5><p>在实战中不小心将页面的<code>name</code>值写成了页面中调用的一个组件的<code>name</code>值，然后在进入页面之后报错，百度之后是因为发生了死循环：</p><p><img src="/2019/03/04/JavaScript/VUE/VueStudy/index1.png" alt="img"></p><p>找了半天注释掉了各种<code>for</code>循环或者<code>forEach</code>超级循环等代码之后还是报这个错误。挠头想了一想，突然瞥到页面的<code>name</code>值和组件的<code>name</code>值写的一样了，然后修改了页面的<code>name</code>值之后一切正常。</p><h5 id="二、在vue中格式化input框中v-model的内容"><a href="#二、在vue中格式化input框中v-model的内容" class="headerlink" title="二、在vue中格式化input框中v-model的内容"></a>二、在vue中格式化input框中v-model的内容</h5><p>当我们需要格式化一个内容的时候可以直接使用<code>filters</code>，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;inputDate | date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是当我们需要格式化的对象是<code>input</code>标签的<code>v-model</code>的时候发现<code>filters</code>并不起作用。</p><p>这是因为<code>input</code>标签的特性决定的：所见即所得。即<code>value</code>属性的值就是显示的值。</p><p>在<code>vue</code>中，其实<code>v-model</code>是封装了<code>v-bind</code>和<code>v-on</code>的一个语法糖，如果我们需要格式化<code>input</code>输入框中的内容的时候，我们需要通过<code>v-on</code>去调用一个方法去格式化<code>v-bind</code>绑定的值。</p><h5 id="三、在vue组件中，-root定义的全局变量无效"><a href="#三、在vue组件中，-root定义的全局变量无效" class="headerlink" title="三、在vue组件中，:root定义的全局变量无效"></a>三、在vue组件中，:root定义的全局变量无效</h5><p>如果在组件或者单页中使用了<code>scoped</code>，那么在声明<code>:root</code>作用域设置css变量，你会发现<code>:root</code>中的变量并未生效。</p><p>原因是因为vue的<code>scoped</code>特性，会在该单页或者组件中在<code>:root</code>之前添加上标识如<code>[data-v-xxx]:root</code>，然后css变量在寻找<code>:root</code>作用域的时候其实是寻找了<code>index.html</code>或者父页面、父组件的<code>:root</code>，所以该变量值会为空。</p><p>解决方案：</p><ol><li>在<code>index.html</code>中设置<code>:root</code>作用域</li><li>在该单页或者组件的最外层父元素中添加变量</li><li>通过引入公共css样式并在该样式文件中添加<code>:root</code>作用域</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study</title>
      <link href="/2019/03/01/JavaScript/Study/Study/"/>
      <url>/2019/03/01/JavaScript/Study/Study/</url>
      
        <content type="html"><![CDATA[<h5 id="一、复制变量"><a href="#一、复制变量" class="headerlink" title="一、复制变量"></a>一、复制变量</h5><p>在<code>JavaScript</code>中复制变量时，从一个变量向另一个变量复制基本类型值和引用类型值时会存在不同的结果。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当被复制的变量是一个基本类型值时</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1:"</span>, num1);  <span class="comment">// 输出 num1: 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num2:"</span>, num2);  <span class="comment">// 输出 num2: 1</span></span><br><span class="line"></span><br><span class="line">num1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1:"</span>, num1);  <span class="comment">// 输出 num1: 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num2:"</span>, num2);  <span class="comment">// 输出 num2: 1</span></span><br><span class="line"></span><br><span class="line">num2 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num1:"</span>, num1);  <span class="comment">// 输出 num1: 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num2:"</span>, num2);  <span class="comment">// 输出 num2: 4</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当被复制的变量是一个引用类型值时</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">name: <span class="string">"obj1"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj1"</span>, obj1);  <span class="comment">// 输出 obj1 &#123;name: "obj1"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj2"</span>, obj2);  <span class="comment">// 输出 obj2 &#123;name: "obj1"&#125;</span></span><br><span class="line"></span><br><span class="line">obj1.name = <span class="string">"hahaha"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj1"</span>, obj1);  <span class="comment">// 输出 obj1 &#123;name: "hahaha"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj2"</span>, obj2);  <span class="comment">// 输出 obj2 &#123;name: "hahaha"&#125;</span></span><br><span class="line"></span><br><span class="line">obj2.name = <span class="string">"abcd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj1"</span>, obj1);  <span class="comment">// 输出 obj1 &#123;name: "abcd"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj2"</span>, obj2);  <span class="comment">// 输出 obj2 &#123;name: "abcd"&#125;</span></span><br></pre></td></tr></table></figure><p>在例子中我们会发现，当我们复制一个基本类型值的时候，我们改变<code>num1</code>的值时，<code>num2</code>的值还是之前的值不变；但是当我们复制一个引用类型的时候，我们改变<code>obj1</code>中的<code>name</code>属性值之后，<code>obj2</code>中的<code>name</code>属性值也发生了改变。</p><p>如果从一个变量向另一个变量复制基本类型的值，会在内存栈中新建一个对象，然后将复制的这个变量复制到这个新的对象中，这个时候内存中就存在两个不同的对象，所以当我们在改变其中一个的值的时候另一个的值不受影响。</p><p><img src="/2019/03/01/JavaScript/Study/Study/before-copy.jpg"></p><p>如果从一个变量向另一个变量复制引用类型的值时，同样也会在内存栈中新建一个对象，然后将这个值复制到新建的对象中，但是不同的是，这个时候在内存中储存的不是一个实际的值，而是指向内存堆中一个对象的地址的指针。在复制结束之后，内存栈中储存的对象实际都指向内存堆中的同一个地址的值。当我们改变其中一个对象的值的时候，其实并不会改变内存栈中地址的值，而是会改变该地址指向的内存堆中那个对象的值，这就是为什么我们在改变<code>obj1</code>或者<code>obj2</code>的时候，另一个对象的值也会发生改变的原因了。</p><p><img src="/2019/03/01/JavaScript/Study/Study/obj-copy.jpg" alt="img"></p><h5 id="二、检测类型"><a href="#二、检测类型" class="headerlink" title="二、检测类型"></a>二、检测类型</h5><p>当我们要检测一个变量是什么类型的时候，我们常用<code>typeof</code>操作符。<code>typeof</code>操作符在检测基本属性类型的时候是最好的工具，即<code>字符串</code>、<code>数值</code>、<code>布尔值</code>、<code>undefined</code>等基本数据类型，但是当我们在检测一个变量的值是否是一个对象<code>Object</code>或者<code>null</code>的时候，<code>typeof</code>操作符就不适合了。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"abcd"</span>;  <span class="comment">//String</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;   <span class="comment">//Boolean</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">22</span>;      <span class="comment">//Number</span></span><br><span class="line"><span class="keyword">var</span> u;           <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">null</span>;    <span class="comment">//null</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;      <span class="comment">//Object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"s:"</span>, <span class="keyword">typeof</span> s);  <span class="comment">// 输出 s: string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b:"</span>, <span class="keyword">typeof</span> b);  <span class="comment">// 输出 b: boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"i:"</span>, <span class="keyword">typeof</span> i);  <span class="comment">// 输出 i: number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"u:"</span>, <span class="keyword">typeof</span> u);  <span class="comment">// 输出 u: undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"n:"</span>, <span class="keyword">typeof</span> n);  <span class="comment">// 输出 n: object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"o:"</span>, <span class="keyword">typeof</span> o);  <span class="comment">// 输出 o: object</span></span><br></pre></td></tr></table></figure><p>当我们需要检测一个引用类型的值时，我们并不想知道某个值是对象，而是想知道它是什么类型的对象。因此，我们在检测引用类型是什么类型的对象的时候，可以使用<code>instanceof</code>操作符。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;     <span class="comment">//Object</span></span><br><span class="line"><span class="keyword">var</span> a = [];     <span class="comment">//Array</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="regexp">/^$/</span>;   <span class="comment">//RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"o:"</span>, o <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// 输出 o: true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a:"</span>, a <span class="keyword">instanceof</span> <span class="built_in">Array</span>);   <span class="comment">// 输出 a: true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"e:"</span>, e <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);  <span class="comment">// 输出 e: true</span></span><br></pre></td></tr></table></figure><p>在检测一个引用类型值和<code>Object</code>构造函数的时候，<code>instanceof</code>操作符会返回<code>true</code>，但是如果我们使用<code>instanceof</code>操作符去检测基本类型的值时，始终会返回<code>false</code>，因为被检测的参数是基本类型而不是对象。</p><h5 id="三、new-Date-在safari上的坑"><a href="#三、new-Date-在safari上的坑" class="headerlink" title="三、new Date()在safari上的坑"></a>三、new Date()在safari上的坑</h5><p>在平常设置指定日期的时候我们常用<code>new Date(&quot;yyyy-MM-dd HH:mm:ss&quot;)</code>的格式将字符型的日期转换成<code>Date</code>类型，在大多数主流浏览器中都能正确的设置日期，但是在<code>safari</code>中却报错并返回<code>Invalid Date</code>。</p><p>所以当我们在使用<code>new Date()</code>之前，需要将日期字符串转换为<code>safari</code>所能识别的格式，具体有哪些格式大家可以去尝试，我个人推荐使用<code>yyyy/MM/dd HH:mm:ss</code>的格式，因为在<code>IE8</code>中不支持<code>-</code>的方式分割日期，推荐是用<code>/</code>进行分割。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客主题NexT相关配置</title>
      <link href="/2019/02/27/blog/blog-theme-set/"/>
      <url>/2019/02/27/blog/blog-theme-set/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为我的<code>Hexo</code>博客用的是<code>NexT</code>主题，故其他主题的配置我不是很清楚。</p></blockquote><p>主题配置文件路径为：<code>themes/next/_config.yml</code></p><h5 id="一、主题风格"><a href="#一、主题风格" class="headerlink" title="一、主题风格"></a>一、主题风格</h5><p>以下操作均在<code>_config.yml</code>文件内进行。</p><ol><li><p>修改<code>scheme</code>属性可以修改<code>NexT</code>主题的风格</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure></li><li><p>修改<code>menu</code>属性可以修改主题的菜单项</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings 菜单设置</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class="line"># Usage: `Key: /link/ || icon`</span><br><span class="line"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before `||` delimeter is the target link.</span><br><span class="line"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><br><span class="line">menu:</span><br><span class="line">  home: / || home  # 首页</span><br><span class="line">  about: /about/ || user  # 关于</span><br><span class="line">  tags: /tags/ || tags  # 标签</span><br><span class="line">  categories: /categories/ || th  # 分类</span><br><span class="line">  archives: /archives/ || archive  # 归档</span><br><span class="line">  #schedule: /schedule/ || calendar  # 日程</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap  # 网站地图</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># 是否使用网站icon</span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><ul><li><p>添加<code>tags(标签页)</code>、<code>categories(分类)</code>、<code>archives(归档)</code>、<code>about(关于)</code>菜单项需要新建对应的页面，如果未新建对应的页面，点击菜单项跳转后会提示<code>page not found</code>，新建页面需要在网站根目录下打开终端，然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n page <span class="string">"tages"</span> <span class="comment"># 新建标签页</span></span><br><span class="line">hexo n page <span class="string">"categories"</span> <span class="comment"># 新建分类页</span></span><br><span class="line">hexo n page <span class="string">"archives"</span> <span class="comment"># 新建归档页</span></span><br><span class="line">hexo n page <span class="string">"about"</span> <span class="comment"># 新建关于页</span></span><br></pre></td></tr></table></figure><p>新建菜单页后会在<code>source/</code>下生成一个新的目录，目录名对应<code>tags</code>、<code>categories</code>等。</p><p>进入对应的目录下可以看到一个<code>index.md</code>文件，用编辑器打开之后内容为(此处用<code>tags</code>目录下的<code>index.md</code>做举例，其他的类似)：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-02-26 13:42:22</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后在<code>date</code>属性下面添加一个<code>type</code>属性，作用是设置该md文件的类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-02-26 13:42:22</span><br><span class="line">type: "tags" # 这是新添加的</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="二、引入评论功能"><a href="#二、引入评论功能" class="headerlink" title="二、引入评论功能"></a>二、引入评论功能</h5><p><code>Hexo</code>支持多种评论平台，我使用的是<code>Gitment</code>，这是一个基于<code>GitHub issues</code>的第三方评论系统，他使用了你的<code>GtiHub</code>仓库中的<code>issues</code>作为评论系统。效果可以查看<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment DEMO</a>。</p><p>我选择<code>Gitment</code>的原因主要有：</p><ol><li><code>Gitment</code>是基于<code>GitHub issues</code>开发的评论系统，而我的博客就是通过<code>GitHub</code>搭建的，使用起来会更加方便。</li><li>我的博客主要是用于记录我在<code>JavaScript</code>、<code>VUE</code>、<code>Node.js</code>等知识学习中遇到的一些问题以及我的学习心得，主要内容以代码为主，所以对<code>GitHub</code>的东西有一种“特殊”的感情。</li><li><code>Gitment</code>的评论会直接添加在我对应的<code>GitHub issues</code>中，我在查看评论时会更加的方便。</li></ol><p>接下来就开始我们的添加之旅吧~</p><ol><li><p>首先在博客</p></li><li><p>申请一个<code>Github OAuth Application</code>，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">注册地址</a></p><blockquote><p> <strong>注意，在<code>Authorization callback URL</code>这一栏一定要填写你的网站<code>url</code>，即：`<a href="https://xxx.github.io" target="_blank" rel="noopener">https://xxx.github.io</a></strong>`</p></blockquote><p><img src="/2019/02/27/blog/blog-theme-set/oauth.png" alt="示例图"></p></li><li><p>注册成功之后你会获得一个<code>Client ID</code>和<code>Client Secret</code>，用于之后的<code>Gitment</code>评论系统登录。</p><p><img src="/2019/02/27/blog/blog-theme-set/client.png" alt="示例图"></p></li><li><p>修改<code>NexT</code>主题的配置文件，路径为：<code>博客根目录/theme/_config.yml</code>，找到<code>Gitment</code>属性（如果没有可以自行添加）</p><p><img src="/2019/02/27/blog/blog-theme-set/next-gitment-set.png" alt="示例图"></p><p>其中<code>github_user</code>是你的<code>GitHub</code>账户名，<code>github_repo</code>则是你这个仓库名（这个仓库名是用于存放你的评论位置的，一般用一个空仓库或者博客的仓库，不要在此填写仓库连接，填写仓库名就行了），<code>client_id</code>是我们在步骤2注册成功后<code>GitHub</code>给我们的<code>Client ID</code>，<code>client_secret</code>是刚才的<code>Client Secret</code>。<strong>注意：在<code>:</code>之后必须添加一个空格</strong></p><p>在主题的根目录下我们打开<code>~/layout/_third-party/comments/</code>，在该目录下编辑<code>gitment.swig</code>文件内容（该文件一般为<code>NexT</code>主题自带）。我们需要将<code>gitment</code>的部分<code>link</code>的<code>href</code>更换，因为<code>gitment</code>使用的是<code>GitHub</code>的服务器，存在跨域的问题，原作者的网站证书失效了，所以我们需要修改并引用别人的<code>.css</code>和<code>.js</code>文件替换掉来解决跨域问题，要不然在登录<code>gitment</code>的时候会<code>alert</code>报错<code>[object ProgressEvent]</code>。</p><p>在这里我百度了一下问题，给大家列出两个解决方案：</p><ol><li>修改浏览器设置，将<code>https://gh-oauth.imsun.net/</code>加入例外，但是别人浏览你的博客的时候不一定会添加。</li><li>修改<code>~/layout/_third-party/comments/gitment.swing</code>文件，将里面的<code>https://imsun.github.io/gitment/style/default.css</code>替换为<code>https://www.wenjunjiang.win/css/gitment.css</code>；<code>https://imsun.github.io/gitment/dist/gitment.browser.js</code>替换为<code>https://www.wenjunjiang.win/js/gitment.js</code></li></ol><p>使用方案2记得要将<code>NexT</code>主题的设置中的<code>gitment</code>下的<code>mint</code>属性修改为<code>false</code></p><p><img src="/2019/02/27/blog/blog-theme-set/link-set.png" alt="示例图"></p></li></ol><p>到这里基本你在你的博客博文下都能看到<code>gitment</code>的评论框了，不过使用之前还需要做两个步骤：</p><ol><li><p>博客的主人需要登录并绑定对应的<code>GitHub</code>帐号；</p></li><li><p>登录之后需要对每篇博文下的评论功能进行初始化，需要一篇篇的点（无奈的表情渐渐浮现），不过网上有人写了批处理脚本，但是我没尝试过。</p><p><img src="/2019/02/27/blog/blog-theme-set/gitment-init.png" alt="示例图"></p></li></ol><hr><blockquote><p>到了，到此<code>Hexo</code>+<code>GitHub</code>搭建博客的文章基本结束了，以后还有什么遇到的坑我会继续补充的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的设置</title>
      <link href="/2019/02/27/blog/blog-set/"/>
      <url>/2019/02/27/blog/blog-set/</url>
      
        <content type="html"><![CDATA[<h5 id="一、Hexo配置文件说明"><a href="#一、Hexo配置文件说明" class="headerlink" title="一、Hexo配置文件说明"></a>一、Hexo配置文件说明</h5><blockquote><ul><li><code>Hexo</code>的配置文件位置是：<code>~/_config.yml</code></li><li>在编辑配置文件的时候，在相应的设置项的<code>:</code>之后一定要添加一个空格。</li><li>其他一些详细的设置可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">官方文档(中文)</a></li><li>在这里我着重讲解我的配置文件，可以作为你自己<code>Hexo</code>博客的配置参考</li></ul></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># 网站信息设置</span><br><span class="line"># Site</span><br><span class="line"># 网站标题</span><br><span class="line">title: HuangJunjia's Blog</span><br><span class="line"># 网站副标题</span><br><span class="line">subtitle: </span><br><span class="line"># 网站描述</span><br><span class="line">description:</span><br><span class="line"># 网站关键字</span><br><span class="line">keywords:</span><br><span class="line"># 网站作者昵称</span><br><span class="line">author: HuangJunjia</span><br><span class="line"># 网站语言，默认为英语，此处设置为简中</span><br><span class="line">language: zh-Hans</span><br><span class="line"># 时区，默认为电脑时区</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># 博客网址设置</span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line"># 网址，如果你的博客是放在某个目录的子目录之下，需要将该设置修改为 'http://yoursite.com/child'</span><br><span class="line">url: http://yoursite.com</span><br><span class="line"># 根目录，如果你的博客是放在某个目录的子目录之下，需要将该设置修改为 '/child/'</span><br><span class="line">root: /</span><br><span class="line"># 文章链接地址格式 。即文章存放的目录。</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># 目录设置</span><br><span class="line"># Directory</span><br><span class="line"># 资源文件夹</span><br><span class="line">source_dir: source</span><br><span class="line"># 公共文件夹，用于存放 hexo g 生成的静态文件</span><br><span class="line">public_dir: public</span><br><span class="line"># 标签文件夹，默认为tags，路径为：./source/tags</span><br><span class="line">tag_dir: tags</span><br><span class="line"># 归档文件夹，默认为archives，路径为：./source/archives</span><br><span class="line">archive_dir: archives</span><br><span class="line"># 分类文件夹，默认为categories，路径为：./source/categories</span><br><span class="line">category_dir: categories</span><br><span class="line"># 代码文件夹，默认为code，路径为：./downloads/code</span><br><span class="line">code_dir: downloads/code</span><br><span class="line"># 国际化文件夹，默认跟language相同</span><br><span class="line">i18n_dir: :lang</span><br><span class="line"># 不需要渲染的文件夹或文件夹,放在[]中</span><br><span class="line"># 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># 写作选项</span><br><span class="line"># Writing</span><br><span class="line"># 新建博文的默认名称</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line"># 默认布局模版</span><br><span class="line">default_layout: post</span><br><span class="line"># 是否将标题转换成标题形式，即首字母大写</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line"># 在新标签页中打开网页</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line"># 是否渲染草稿</span><br><span class="line">render_drafts: false</span><br><span class="line"># 是否启动Asset文件夹</span><br><span class="line">post_asset_folder: true</span><br><span class="line"># 是否将链接改写成根目录的相对地址</span><br><span class="line">relative_link: false</span><br><span class="line"># 是否显示未来的文章</span><br><span class="line">future: true</span><br><span class="line"># 博文中代码块的设置</span><br><span class="line">highlight:</span><br><span class="line">  enable: true # 是否使代码高亮</span><br><span class="line">  line_number: true # 是否显示行号</span><br><span class="line">  auto_detect: false # 是否自动检测语言</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># 分页设置</span><br><span class="line"># @-----以下设置需要安装对应插件：</span><br><span class="line">#  hexo-generator-index</span><br><span class="line">#  hexo-generator-archive</span><br><span class="line">#  hexo-generator-category</span><br><span class="line">#  hexo-generator-tag</span><br><span class="line"># @-----END</span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = '')</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line"># 首页分页设置</span><br><span class="line">index_generator:</span><br><span class="line">  path: ''</span><br><span class="line">  per_page: 10 # 首页每页显示文章数</span><br><span class="line">  order_by: -date</span><br><span class="line">  </span><br><span class="line"># 分类与标签</span><br><span class="line"># Category &amp; Tag</span><br><span class="line"># 默认分类</span><br><span class="line">default_category: uncategorized</span><br><span class="line"># 分类别名</span><br><span class="line">category_map:</span><br><span class="line"># 标签别名</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># 日期 / 时间格式</span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10 # 每页显示文章数</span><br><span class="line">pagination_dir: page # 分页路径，在public中可以查看</span><br><span class="line"></span><br><span class="line"># 主题设置</span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next # 选择主题</span><br><span class="line"></span><br><span class="line"># 部署设置</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git # 部署类型</span><br><span class="line">  repo: git@github.com:HuangJunjia/HuangJunjia.github.io.git # 部署连接地址</span><br><span class="line">  branch: master # 部署到git的分支名</span><br><span class="line">  </span><br><span class="line"># 搜索配置</span><br><span class="line"># 该功能需要提前安装插件</span><br><span class="line">#  hexo-generator-search</span><br><span class="line"># search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post # post为仅索引文章，若想索引全部则设置为all</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h5 id="二、如何安装Hexo的主题"><a href="#二、如何安装Hexo的主题" class="headerlink" title="二、如何安装Hexo的主题"></a>二、如何安装Hexo的主题</h5><ol><li><code>Hexo</code>默认主题是<code>landscape</code></li><li>若需要修改主题，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题</a>中下载你想安装的主题</li><li>将下载好的主题放入<code>themes</code>目录下</li><li>我选择的主题是<code>NexT</code></li></ol><h5 id="三、添加引入图片的功能"><a href="#三、添加引入图片的功能" class="headerlink" title="三、添加引入图片的功能"></a>三、添加引入图片的功能</h5><p>先吐槽一下<code>Hexo</code>，他的图片引入功能很坑，用相对路径的方式引入图片会发现引入失败。我们需要在博客根目录下安装插件<code>hexo-asset-image</code>，之后我们通过<code>hexo n &quot;new file&quot;</code>的时候会在<code>_post</code>目录下生成一个同名的目录，我们将需要引入的图片放入那个目录下，之后引用图片就可以用相对路径引入了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">img name</span>](<span class="link">newFile/img.png</span>)</span><br></pre></td></tr></table></figure><h5 id="三、参考博文"><a href="#三、参考博文" class="headerlink" title="三、参考博文"></a>三、参考博文</h5><p><a href="https://blog.csdn.net/xuezhisdc/article/details/53130383" target="_blank" rel="noopener">《hexo教程系列——hexo配置教程》</a></p><blockquote><p>下一篇博文将会介绍一些<code>NexT</code>主题的相关配置</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github+hexo搭建一个Blog</title>
      <link href="/2019/02/26/blog/blog-build/"/>
      <url>/2019/02/26/blog/blog-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天突发奇想，自己搭建一个blog就可以不用github那个markdown来撰写我的博文了，然后去百度搜了一下，网友推荐了使用Hexo（当然还有其他）搭建一个自己的blog。</p></blockquote><h5 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h5><ul><li>一个GitHub帐号</li><li>一个名称为YourName.github.io的仓库</li><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li></ul><blockquote><p>前4步操作直接百度就好，我在此主要讲建立Blog的主要过程以及一些需要注意的问题和坑。因为我个人使用的是Windows的系统，在此不讲解其他系统的搭建过程，但是大同小异，可以参考。</p></blockquote><h5 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h5><ol><li><p>在确保你安装好<code>Node</code>的前提下，并且能在终端中输入<code>npm -v</code>出现版本信息之后，在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>然后在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo v</span><br></pre></td></tr></table></figure><p>若出现下图则说明你已经成功安装<code>Hexo。</code></p><p><img src="/2019/02/26/blog/blog-build/hexo-v.png" alt="安装成功示例图"></p></li><li><p>创建一个目录，作为你的blog目录。</p></li><li><p>进入该目录。</p><p><img src="/2019/02/26/blog/blog-build/cd-blog.png" alt="示例图"></p></li><li><p>初始化该目录，初始化的过程可能会稍微花费一些时间；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>当终端中显示<code>INFO Start blogging with Hexo!</code>的时候说明初始化成功了。</p><p><img src="/2019/02/26/blog/blog-build/hexo-init.png" alt="示例图"></p></li><li><p>安装<code>Hexo</code>运行所需要的相关组件及依赖；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install //或者 yarn 我个人推荐使用后者</span><br></pre></td></tr></table></figure><p><img src="/2019/02/26/blog/blog-build/npm-install.png" alt="示例图"></p><p>如果终端中未出现<code>ERROR</code>等错误提示，<code>WARN</code>警告我们直接忽略就好。</p></li><li><p>在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动服务器，</p><p><img src="/2019/02/26/blog/blog-build/hexo-s.png" alt="示例图"></p><p>如此显示说明<code>Hexo</code>已经启动了，我们就可以进入有下划线的网址<code>http://localhost:4000</code>浏览我们的博客长啥样了。</p><p><img src="/2019/02/26/blog/blog-build/hexo-index.png" alt="示例图"></p><p>到此为止，<code>Hexo</code>的安装已经结束了。</p></li></ol><h5 id="三、将我们的Hexo博客部署在我们的Username-github-io仓库中"><a href="#三、将我们的Hexo博客部署在我们的Username-github-io仓库中" class="headerlink" title="三、将我们的Hexo博客部署在我们的Username.github.io仓库中"></a>三、将我们的Hexo博客部署在我们的<code>Username.github.io</code>仓库中</h5><ol><li><p>新建一个仓库，仓库名必须为<code>xxx.github.io</code>，一般xxx与你GitHub昵称相同。</p><p><img src="/2019/02/26/blog/blog-build/new-repo.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/add-repo.png" alt="示例图"></p></li><li><p>因为<code>Hexo</code>部署需要通过GitHub的ssh连接，所以需要配置一个<code>ssh key</code>，配置方法百度即可。</p></li><li><p>安装<code>hexo-deployer-git</code>插件（非常重要）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git //或者 yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>修改<code>Hexo</code>的配置文件<code>_config.yml</code>，连接你的GitHub仓库，</p><p><img src="/2019/02/26/blog/blog-build/deploy.png" alt="示例图"></p><p><code>type</code>设置为<code>git</code>，<code>repo</code>填写你的GitHub仓库地址，<code>branck</code>填写<code>master</code></p><p><img src="/2019/02/26/blog/blog-build/github-repo.png" alt="示例图"></p></li><li><p>在终端中按住<code>ctrl + c</code>结束正在运行的<code>Hexo</code>服务，然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g //生成部署的文件，在public目录下</span><br></pre></td></tr></table></figure><p><img src="/2019/02/26/blog/blog-build/hexo-g.png" alt="示例图"></p><p>接着输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d //将生成的部署文件上传到我们之前新建的GitHub仓库中</span><br></pre></td></tr></table></figure><blockquote><p>因为打印的日志有点多，我就截取主要部分。</p></blockquote><p><img src="/2019/02/26/blog/blog-build/hexo-d-1.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/hexo-d-2.png" alt="示例图"></p><p>出现最后一行说明我们已经成功的将我们的<code>Hexo</code>blog部署到我们的GitHub仓库中了。</p><p>这时我们可以打开GitHub进入我们的仓库查看上传的文件有哪些。</p><p><img src="/2019/02/26/blog/blog-build/github-new.png" alt="示例图"></p><p>到这里就差最后一步了！</p></li><li><p>修改GitHub仓库设置，在<code>GitHub Pages</code>中修改选中的分支，将分支修改为<code>master branch</code>，等待页面刷新之后，我们就可以拿到<code>https://xxx.github.io</code>这个网址了~（这里因为我之前有建立过blog，所以就直接拿我之前blog的设置来做例子了~）</p><p><img src="/2019/02/26/blog/blog-build/repo-setting.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/page-setting.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/get-address.png" alt="示例图"></p></li><li><p>这个时候，我们打开网址，即<code>https://xxx.github.io</code>，就可以看到我们的<code>Hexo</code>博客了！记得xxx是你当初设置的~记得替换。（可能在设置完GitHub Pages之后需要等个几分钟才能看到我们的页面）</p></li></ol><h5 id="四、安装过程中可能会碰到的问题"><a href="#四、安装过程中可能会碰到的问题" class="headerlink" title="四、安装过程中可能会碰到的问题"></a>四、安装过程中可能会碰到的问题</h5><ul><li><p>问题1：4000端口被占用，无法启动服务</p><p><img src="/2019/02/26/blog/blog-build/hexo-s-err.png" alt="示例图"></p><p>解决方法：改变服务器的端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 端口号 // 端口号可以是未被占用的</span><br></pre></td></tr></table></figure><p><img src="/2019/02/26/blog/blog-build/hexo-s-p.png" alt="示例图"></p></li></ul><h5 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h5><p>可能会有一些小细节没处理好，如果按照我的方法出现部署失败的，可以在评论里留言，我一定会认真回复的。</p><blockquote><p>下一篇文章我将会讲解<code>Hexo</code>的一些设置以及<code>NexT</code>主题的相关设置，增加评论功能等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐 for electron开发日记</title>
      <link href="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/"/>
      <url>/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介：使用electron-vue模版开发，非常感谢<a href="https://github.com/SimulatedGREG" target="_blank" rel="noopener">@Greg Holguin</a>大大的electron-vue项目，以及使用的网易云音乐nodejs版的api的作者<a href="https://github.com/Binaryify" target="_blank" rel="noopener">@Binaryify</a>大大，他们俩是促使我尝试制作这个项目的原因。</p></blockquote><hr><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/HuangJunjia/3rdNeteaseCloudDemo" target="_blank" rel="noopener">网易云音乐 for electron</a></p><hr><h3 id="开发进度"><a href="#开发进度" class="headerlink" title="开发进度"></a>开发进度</h3><blockquote><ol><li>header部分<ul><li>logo区域：<ul><li>已完成<ul><li>icon的设置，title的设置</li></ul></li><li>未完成<ul><li>无</li></ul></li></ul></li><li>search区域：<ul><li>已完成：<ul><li>样式设计和编写</li><li>input事件触发搜索结果</li></ul></li><li>未完成：<ul><li>点击搜索图标跳转至搜索结果页面未制作</li><li>点击input触发的推荐结果跳转至对应的结果页未制作</li></ul></li></ul></li><li>setting区域：<ul><li>已完成：<ul><li>完成图标的制作</li></ul></li><li>未完成：<ul><li>对应功能未实现</li></ul></li></ul></li></ul></li></ol><ul><li>视窗操作区域：<ul><li>已完成：<ul><li>图标按钮</li><li>当前窗口最小化、最大化/还原、关闭操作</li></ul></li><li>未完成：<ul><li>无</li></ul></li></ul></li></ul></blockquote><h3 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h3><h5 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h5><ol><li><p>node.js  <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网</a></p></li><li><p>vue  <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>electron-vue模版  <a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">项目地址</a></p><blockquote><p>该项目的目的，是为了要避免使用 vue 手动建立起 electron 应用程序。electron-vue 充分利用 <code>vue-cli</code> 作为脚手架工具，加上拥有 <code>vue-loader</code> 的 <code>webpack</code>、<code>electron-packager</code> 或是 <code>electron-builder</code>，以及一些最常用的插件，如<code>vue-router</code>、<code>vuex</code> 等等。</p></blockquote><p>以上为官网介绍。</p><p>安装方式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装 vue-cli 和 脚手架样板代码</span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br><span class="line"></span><br><span class="line"># 安装依赖并运行你的程序</span><br><span class="line">cd my-project</span><br><span class="line">yarn # 或者 npm install</span><br><span class="line">yarn run dev # 或者 npm run dev</span><br></pre></td></tr></table></figure></li><li><p>拉取网易云音乐 Node.js API service的github项目  <a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="noopener">项目地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务"><a href="#二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务" class="headerlink" title="二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务"></a>二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务</h5><p>该项目的网易云API是已经封装好的，但是需要单独的启动node.js，端口为3000，这样会显得比较麻烦，直接使用一个node.js的配置文件就足够了。</p><blockquote><p>ps：因为该项目目前还在保持更新，若大家怕在后续的更新中需要重新修改配置，推荐大家直接在网易云API中直接启动node服务，我这里只是提供了我需要的一种方式。</p></blockquote><p>过程：</p><ol><li><p>拷贝网易云音乐API目录下的./module和./util目录，复制到electron-vue项目根目录下，此时目录结构应该如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">electron-vue</span><br><span class="line">|-- .electron-vue</span><br><span class="line">|-- build</span><br><span class="line">|-- dist</span><br><span class="line">|-- node_modules</span><br><span class="line">|-- module</span><br><span class="line">|-- src</span><br><span class="line">|-- static</span><br><span class="line">|-- util</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>将网易云音乐API目录下app.js中的代码复制到electron-vue目录下的.electron-vue/dev-runner.js中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'../util/request'</span>)</span><br><span class="line"><span class="keyword">const</span> cache = <span class="built_in">require</span>(<span class="string">'apicache'</span>).middleware</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"># 以下为网易云API的node服务代码</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// CORS</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.path !== <span class="string">'/'</span> &amp;&amp; !req.path.includes(<span class="string">'.'</span>))&#123;</span><br><span class="line">    res.header(&#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: req.headers.origin || <span class="string">'*'</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Requested-With'</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'PUT,POST,GET,DELETE,OPTIONS'</span>,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cookie parser</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  req.cookies = &#123;&#125;, (req.headers.cookie || <span class="string">''</span>).split(<span class="regexp">/\s*;\s*/</span>).forEach(<span class="function"><span class="params">pair</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> crack = pair.indexOf(<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">if</span>(crack &lt; <span class="number">1</span> || crack == pair.length - <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">    req.cookies[<span class="built_in">decodeURIComponent</span>(pair.slice(<span class="number">0</span>, crack)).trim()] = <span class="built_in">decodeURIComponent</span>(pair.slice(crack + <span class="number">1</span>)).trim()</span><br><span class="line">  &#125;)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// body parser</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// cache</span></span><br><span class="line">app.use(cache(<span class="string">'2 minutes'</span>, (<span class="function">(<span class="params">req, res</span>) =&gt;</span> res.statusCode === <span class="number">200</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// router</span></span><br><span class="line"><span class="keyword">const</span> special = &#123;</span><br><span class="line">  <span class="string">'daily_signin.js'</span>: <span class="string">'/daily_signin'</span>,</span><br><span class="line">  <span class="string">'fm_trash.js'</span>: <span class="string">'/fm_trash'</span>,</span><br><span class="line">  <span class="string">'personal_fm.js'</span>: <span class="string">'/personal_fm'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.readdirSync(path.join(__dirname, <span class="string">'../module'</span>)).reverse().forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!(<span class="regexp">/\.js$/i</span>.test(file))) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> route = (file <span class="keyword">in</span> special) ? special[file] : <span class="string">'/'</span> + file.replace(<span class="regexp">/\.js$/i</span>, <span class="string">''</span>).replace(<span class="regexp">/_/g</span>, <span class="string">'/'</span>)</span><br><span class="line">  <span class="keyword">let</span> question = <span class="built_in">require</span>(path.join(__dirname, <span class="string">'../module'</span>, file))</span><br><span class="line"></span><br><span class="line">  app.use(route, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> query = <span class="built_in">Object</span>.assign(&#123;&#125;, req.query, req.body, &#123;<span class="attr">cookie</span>: req.cookies&#125;)</span><br><span class="line">    question(query, request)</span><br><span class="line">      .then(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[OK]'</span>, <span class="built_in">decodeURIComponent</span>(req.originalUrl))</span><br><span class="line">        res.append(<span class="string">'Set-Cookie'</span>, answer.cookie)</span><br><span class="line">        res.status(answer.status).send(answer.body)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(answer)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[ERR]'</span>, <span class="built_in">decodeURIComponent</span>(req.originalUrl))</span><br><span class="line">        <span class="keyword">if</span>(answer.body.code ==<span class="string">'301'</span>) answer.body.msg = <span class="string">'需要登录'</span></span><br><span class="line">        res.append(<span class="string">'Set-Cookie'</span>, answer.cookie)</span><br><span class="line">        res.status(answer.status).send(answer.body)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span> <span class="comment">//在这里修改端口号</span></span><br><span class="line"></span><br><span class="line">app.server = app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server running @ http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></li></ol><hr><p>20190201更新：</p><pre><code>我将网易云音乐API node服务放在了我的服务器上，所以我这里直接使用我的服务器地址。&lt;font color=#ff0000&gt;推荐为网易云API单独启动一个node服务，然后通过pm2进行管理。&lt;/font&gt;</code></pre><hr><ol start="3"><li><p>启动electron-vue的node服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn dev //或者 npm run dev</span><br></pre></td></tr></table></figure><p> 此时控制台应打印出</p><p> <img src="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/1.png" alt="控制台打印内容"></p><p> 稍等一会你会看到一个electron应用自动启动，说明node服务正式配置完毕。</p></li></ol><p>四、electron服务配置反向代理</p><ol><li><p>因为在electron-vue中需要用到网易云音乐API服务器的接口，但是网易云音乐API服务器端口为3000（或许你自定了一个端口），如果直接调用，会报跨域的错误，提示404</p><p><img src="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/2.png" alt="报错图片"></p><p>此时需要在electron-vue的.electron-vue/dev-runner.js中的electron服务中配置一个代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------- electron-vue的node服务 -----------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRenderer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(</span><br><span class="line">          compiler,</span><br><span class="line">          &#123;</span><br><span class="line">            contentBase: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">            quiet: <span class="literal">true</span>,</span><br><span class="line">            before (app, ctx) &#123;</span><br><span class="line">              app.use(hotMiddleware)</span><br><span class="line">              ctx.middleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*---- 以下是添加的代理设置 ----*/</span></span><br><span class="line">            proxy: &#123;</span><br><span class="line">              <span class="string">"/api"</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>, <span class="comment">//指向网易云音乐API nodejs 服务器地址</span></span><br><span class="line">                <span class="comment">//也可以使用你自己的服务器地址，但是方法同理</span></span><br><span class="line">                pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">''</span>&#125;,</span><br><span class="line">                changeOrigin: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*---- 代理设置到此结束 ----*/</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">｝----</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="三、遇到的问题及解决方案"><a href="#三、遇到的问题及解决方案" class="headerlink" title="三、遇到的问题及解决方案"></a>三、遇到的问题及解决方案</h5><ol><li><p>问题：在使用<code>tray</code>设置托盘的时候，在<code>dev</code>环境下能正常运行，但是打包成<code>.exe</code>文件之后提示icon错误。</p><p><img src="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/3.png" alt="图源自stack overflow"></p><p>原因：需要引入<code>electron</code>中的<code>nativeImage</code>模块，将icon转换成原生的图片。</p><p>解决方案：</p><ul><li><p>原代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tray = <span class="keyword">new</span> Tray(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/build/icon.ico`</span>);</span><br></pre></td></tr></table></figure></li><li><p>修改之后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Tray, nativeImage &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iconPath = path.join(__dirname, <span class="string">'build/icon.ico'</span>);</span><br><span class="line">mainWindow.tray = <span class="keyword">new</span> Tray(nativeImage.createFromPath(iconPath));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>问题：在electron-vue中的页面里使用vuex报错，提示<code>undefind</code>。</p><p>原因：在electron-vue中为了实现多窗口之间能共享vuex的数据，引入了一个<code>vuex-electron</code>的插件，修改了vuex的配置方式。</p><p>解决方案：</p><pre><code>按照`vuex-electron`的方式设置vuex，在`src/renderer/store/modules`中新建一个`NewStore.js`，并在该文件内编写`state`、`mutations`、`actions`</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="comment">// your state code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// your mutations code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// your actions code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>问题：跨域问题如何解决</p><p>原因：electron默认使用同源策略，故若请求了跨域接口，则会报错</p><p>解决方案：</p><ol><li><p>首先在<code>.electron-vue/dev-runner.js</code>文件中的<code>startRenderer</code>函数内添加<code>proxy</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRenderer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  .....</span><br><span class="line">    <span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(</span><br><span class="line">      compiler,</span><br><span class="line">      &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">        quiet: <span class="literal">true</span>,</span><br><span class="line">        before (app, ctx) &#123;</span><br><span class="line">          app.use(hotMiddleware)</span><br><span class="line">          ctx.middleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 增加以下代码</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">          <span class="string">'/api'</span>: &#123;</span><br><span class="line">            target: <span class="string">'http://localhost:port'</span>,</span><br><span class="line">            secure: <span class="literal">false</span>,</span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            pathRewrite: &#123; <span class="string">'^/api'</span>: <span class="string">''</span> &#125;,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    server.listen(<span class="number">9080</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其次在<code>src/main/index.js</code>文件中的<code>new BrowserWindow()</code>方法中添加一个字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个win窗口</span></span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    ......</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      webSecurity: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 网易云音乐 </tag>
            
            <tag> electron-vue </tag>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习</title>
      <link href="/2019/02/26/GitStudy/git-study-1/"/>
      <url>/2019/02/26/GitStudy/git-study-1/</url>
      
        <content type="html"><![CDATA[<h4 id="使用git过程中的经验整理"><a href="#使用git过程中的经验整理" class="headerlink" title="使用git过程中的经验整理"></a>使用git过程中的经验整理</h4><blockquote><p>因为最近在用git添加多个sshkey的时候报错了，使用ssh -V github.com的时候提示key不存在，在不存在的网站(google.com)中找到了解决方案，然后想了想，决定开一个blog专门记录使用git的时候出现的问题以及对应的解决方案。</p></blockquote><h5 id="一、添加多个sshkey"><a href="#一、添加多个sshkey" class="headerlink" title="一、添加多个sshkey"></a>一、添加多个sshkey</h5><ol><li><p>首先执行命令生成第一个git仓库的sshkey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;first-email@address.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>再次执行命令生成第二个git仓库的sshkey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;secound-email@address.com&quot;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意，在生成不同的sshkey的时候记得给每个sshkey起不同的名字。</p></blockquote><ol start="3"><li><p>修改git配置</p><p>这一个操作有两个方法，一个是最常用的方法，也是随便搜索都能找到的方法：</p><ol><li><p>方法1：在<code>~/.ssh</code>目录下新建一个config文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># first-website</span><br><span class="line">Host gitlab.com</span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line"></span><br><span class="line"># second-website</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></li><li><p>方法2：该方法是否规范我不太确定，但是这么做是修改了git里ssh的配置</p><p>修改git目录下的<code>git/etc/ssh/ssh_config</code>文件，在文件的最下面添加连接仓库用到的sshkey文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"># Added by git-extra</span><br><span class="line"></span><br><span class="line"># 在下方添加我们需要通过ssh连接的git仓库对应的sshkey文件</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line">IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line"></span><br><span class="line">Ciphers +aes128-cbc,3des-cbc,aes256-cbc,aes192-cbc</span><br></pre></td></tr></table></figure><p>然后重启git</p></li></ol></li><li><p>之后再连接不同的git仓库就能顺利的连接了</p></li></ol><h5 id="二、将Beyond-Compare-4设置为difftool"><a href="#二、将Beyond-Compare-4设置为difftool" class="headerlink" title="二、将Beyond Compare 4设置为difftool"></a>二、将Beyond Compare 4设置为difftool</h5><p>下载bc4之后在任意地方打开<code>git bash</code>然后输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool bc4</span><br><span class="line">git config --global difftool.prompt <span class="literal">false</span></span><br><span class="line">git config --global difftool.bc4.cmd <span class="string">'"C:\Program Files\Beyond Compare 4\BCompare.exe" "$LOCAL" "$REMOTE"'</span></span><br><span class="line"></span><br><span class="line">git config --global merge.tool bc4</span><br><span class="line">git config --global mergetool.prompt <span class="literal">false</span></span><br><span class="line">git config --global mergetool.bc4.cmd <span class="string">'"C:\Program Files\Beyond Compare 4\BCompare.exe" "$LOCAL" "$REMOTE" "$BASE" "$MERGED"'</span></span><br><span class="line">git config --global mergetool.bc4.trustexitcode <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue大转盘组件</title>
      <link href="/2019/02/26/components/LotteryComponent/Lottery/"/>
      <url>/2019/02/26/components/LotteryComponent/Lottery/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个大转盘抽奖组件，可以自定义盘面，包括颜色、字体、图片等内容。</p></blockquote><p>感谢<a href="https://github.com/muzqi" target="_blank" rel="noopener">@木子七</a>大佬的大转盘文章<a href="https://juejin.im/post/5992b6065188257dd3664dbc" target="_blank" rel="noopener">这里是连接</a>，在之后的使用中发现不能设置奖品并将奖品转动到对应的扇形盘面上，对此我进行了修改，使其可以在<code>vue</code>中正常使用，可能修改的并不好，希望各位指出。</p><p>实现过程我就不再重复编辑了，木子七大佬的文章中以及他的github中对大转盘的实现有详细的描述以及代码实现。在此我只对我改进的部分代码进行示例以及解释。</p><h5 id="一、解决大转盘清晰度"><a href="#一、解决大转盘清晰度" class="headerlink" title="一、解决大转盘清晰度"></a>一、解决大转盘清晰度</h5><ol><li><p>方案1：该方案出自<a href="https://www.jianshu.com/p/2cd5143cf9aa" target="_blank" rel="noopener">@boluobanana的简书文章</a>，非常感谢大佬。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Writes an image into a canvas taking into</span></span><br><span class="line"><span class="comment"> * account the backing store pixel ratio and</span></span><br><span class="line"><span class="comment"> * the device pixel ratio.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author Paul Lewis</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; opts The params for drawing an image to the canvas</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawImage</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!opts.canvas) &#123;</span><br><span class="line">        <span class="keyword">throw</span>(<span class="string">"A canvas is required"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!opts.image) &#123;</span><br><span class="line">        <span class="keyword">throw</span>(<span class="string">"Image is required"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the canvas and context</span></span><br><span class="line">    <span class="keyword">var</span> canvas = opts.canvas,</span><br><span class="line">        context = canvas.getContext(<span class="string">'2d'</span>),</span><br><span class="line">        image = opts.image,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now default all the dimension info</span></span><br><span class="line">        srcx = opts.srcx || <span class="number">0</span>,</span><br><span class="line">        srcy = opts.srcy || <span class="number">0</span>,</span><br><span class="line">        srcw = opts.srcw || image.naturalWidth,</span><br><span class="line">        srch = opts.srch || image.naturalHeight,</span><br><span class="line">        desx = opts.desx || srcx,</span><br><span class="line">        desy = opts.desy || srcy,</span><br><span class="line">        desw = opts.desw || srcw,</span><br><span class="line">        desh = opts.desh || srch,</span><br><span class="line">        auto = opts.auto,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// finally query the various pixel ratios</span></span><br><span class="line">        devicePixelRatio = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// backingStoreRatio此属性已被弃用</span></span><br><span class="line">        <span class="comment">//  backingStoreRatio = context.webkitBackingStorePixelRatio ||</span></span><br><span class="line">        context.mozBackingStorePixelRatio ||</span><br><span class="line">            context.msBackingStorePixelRatio ||</span><br><span class="line">            context.oBackingStorePixelRatio ||</span><br><span class="line">            context.backingStorePixelRatio || <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ratio = devicePixelRatio / backingStoreRatio;</span></span><br><span class="line">            ratio = devicePixelRatio;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ensure we have a value set for auto.</span></span><br><span class="line">    <span class="comment">// If auto is set to false then we</span></span><br><span class="line">    <span class="comment">// will simply not upscale the canvas</span></span><br><span class="line">    <span class="comment">// and the default behaviour will be maintained</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> auto === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        auto = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// upscale the canvas if the two ratios don't match</span></span><br><span class="line">    <span class="comment">// if (auto &amp;&amp; devicePixelRatio !== backingStoreRatio) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (auto &amp;&amp; devicePixelRatio) &#123;</span><br><span class="line">        <span class="keyword">var</span> oldWidth = canvas.width;</span><br><span class="line">        <span class="keyword">var</span> oldHeight = canvas.height;</span><br><span class="line"></span><br><span class="line">        canvas.width = oldWidth * ratio;</span><br><span class="line">        canvas.height = oldHeight * ratio;</span><br><span class="line"></span><br><span class="line">        canvas.style.width = oldWidth + <span class="string">'px'</span>;</span><br><span class="line">        canvas.style.height = oldHeight + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now scale the context to counter</span></span><br><span class="line">        <span class="comment">// the fact that we've manually scaled</span></span><br><span class="line">        <span class="comment">// our canvas element</span></span><br><span class="line">        context.scale(ratio, ratio);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    context.drawImage(pic, srcx, srcy, srcw, srch, desx, desy, desw, desh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方案2：精简版代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getPixelRatio = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> backingStore = context.backingStorePixelRatio ||</span><br><span class="line">        context.webkitBackingStorePixelRatio ||</span><br><span class="line">        context.mozBackingStorePixelRatio ||</span><br><span class="line">        context.msBackingStorePixelRatio ||</span><br><span class="line">        context.oBackingStorePixelRatio ||</span><br><span class="line">        context.backingStorePixelRatio || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>) / backingStore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ratio = getPixelRatio(context);</span><br><span class="line"><span class="keyword">let</span> fontSize = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>].style.fontSize.split(<span class="string">"px"</span>)[<span class="number">0</span>] || <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">canvas.style.width = canvas.width / fontSize + <span class="string">'rem'</span>;</span><br><span class="line">canvas.style.height = canvas.height / fontSize + <span class="string">'rem'</span>;</span><br><span class="line"></span><br><span class="line">canvas.width = canvas.width * ratio;</span><br><span class="line">canvas.height = canvas.height * ratio;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放大倍数</span></span><br><span class="line">context.scale(ratio, ratio);</span><br></pre></td></tr></table></figure><p> 以上两个方案均能解决<code>canvas</code>在高分屏上绘制出现模糊的问题。</p></li></ol><h5 id="二、预加载盘面图片"><a href="#二、预加载盘面图片" class="headerlink" title="二、预加载盘面图片"></a>二、预加载盘面图片</h5><p>在canvas中有多种加载图片的方式，常用的有以下两种方式：</p><ol><li><p>方式一：通过<code>new Image()</code>声明一个<code>Image</code>对象，并通过<code>src</code>设置图片路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个Image()对象</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Image对象的src</span></span><br><span class="line">img.src = <span class="string">"path/icon.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在canvas中绘制图片</span></span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, imageWidth, imageHeight);</span><br></pre></td></tr></table></figure></li><li><p>方式二：首先通过<code>&lt;img&gt;</code>标签向<code>html</code>中插入一张图片，然后使用<code>getElementById</code>获取这个<code>img</code>元素，再执行绘图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在html页面中插入img元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">src</span>=<span class="string">"path/icon.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面中的html元素</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在canvas中绘制图片</span></span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, imageWidth, imageHeight);</span><br></pre></td></tr></table></figure></li></ol><p>讲到这里，有必要提一下这里碰到的一个问题，通过方式一在<code>canvas</code>中绘图一张图片时，发现并不能成功绘制，而通过方式二绘制的时候却能正常显示。</p><p>这是因为<code>canvas</code>在绘制图片的时候需要 <font color="red">等图片加载成功之后才可以进行绘制，<code>drawImage()</code>这个方法在图片未加载完成的时候是不会被调用的，所以导致了绘图失败。</font></p><p>我们该如何解决这个问题呢？我百度并尝试了多种方式，最后总结了三种方法用于解决这个问题：</p><ol><li><p>方法一：<code>&lt;img&gt;</code>标签和<code>window.onload</code>配合使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript代码</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context.drawImage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在后期插入标签：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">img.src = <span class="string">"path"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br></pre></td></tr></table></figure></li><li><p>方法二：使用<code>定时器setTimeout()</code>异步实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>延迟时间需要根据不同的情况设定，所以用定时器去解决这个方案是有弊端的，不能保证定时器时间到了之后图片能正常加载，若出现网络较差的情况还是会遇到无法加载的情况。</p></blockquote></li><li><p>方式三：使用<code>img.onload</code>监听图片加载结束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'图片加载成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>onload</code>监听<code>img</code>的加载，加载结束之后再执行图片的绘制，目前最靠谱的方式就是这个。</p><p>需要注意的是<code>onload</code>是一个异步任务。</p></blockquote><p>我使用的是<code>img</code>标签加<code>onload</code>监听图片加载的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"path"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript代码</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>); <span class="comment">//获取img</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//监听img是否加载结束</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'图片加载成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height); <span class="comment">//绘制图片</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="三、大转盘盘面相关修改"><a href="#三、大转盘盘面相关修改" class="headerlink" title="三、大转盘盘面相关修改"></a>三、大转盘盘面相关修改</h5><ol><li><p>去掉<a href="https://github.com/muzqi" target="_blank" rel="noopener">@木子七</a>大佬原来的触发按钮以及使用<code>canvas</code>绘制的指针，并添加一个透明的<code>div</code>用于给用户”点击”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"canvas-main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"spin_button"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是一个透明的“点击”按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"spin_button_mask"</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">click</span>=<span class="string">"clickBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize1"</span> <span class="attr">src</span>=<span class="string">"prize01.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize2"</span> <span class="attr">src</span>=<span class="string">"prize02.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize3"</span> <span class="attr">src</span>=<span class="string">"prize03.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize4"</span> <span class="attr">src</span>=<span class="string">"prize04.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize5"</span> <span class="attr">src</span>=<span class="string">"prize05.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize6"</span> <span class="attr">src</span>=<span class="string">"prize06.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize7"</span> <span class="attr">src</span>=<span class="string">"prize07.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"pointer-red"</span> <span class="attr">src</span>=<span class="string">"red-pointer.png"</span> <span class="attr">width</span>=<span class="string">"158"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"pointer-gray"</span> <span class="attr">src</span>=<span class="string">"gray-pointer.png"</span> <span class="attr">width</span>=<span class="string">"158"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在&lt;canvas&gt;标签中添加文字说明，用于当浏览器不兼容canvas标签的时候的提示 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载转盘奖品图片和按钮图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---- 加载所有图片，目前是写死用的，可以删除</span></span><br><span class="line"><span class="comment">// 因为onload是异步操作，故每加载一张图片则令imgFlag加一，当imgFlag === 9的时候说明9张图片加载完毕，    此时可以开始绘制转盘</span></span><br><span class="line"><span class="comment">// 加载按钮图片</span></span><br><span class="line"><span class="keyword">let</span> btn_img_red = <span class="built_in">document</span>.getElementById(<span class="string">`pointer-red`</span>);</span><br><span class="line"><span class="keyword">let</span> btn_img_gray = <span class="built_in">document</span>.getElementById(<span class="string">`pointer-gray`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgFlag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> imgs = []; <span class="comment">//此数组用于暂存奖品图片</span></span><br><span class="line"></span><br><span class="line">awards.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123; <span class="comment">//遍历奖品数组并加载奖品图片</span></span><br><span class="line">    <span class="keyword">if</span> (item.img) &#123;</span><br><span class="line">        <span class="keyword">let</span> imgObj = <span class="built_in">document</span>.getElementById(<span class="string">`prize<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>`</span>);</span><br><span class="line">        imgs.push(imgObj);</span><br><span class="line">        imgObj.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            imgFlag++;</span><br><span class="line">            <span class="keyword">if</span> (imgFlag &gt;= <span class="number">9</span>) &#123; <span class="comment">//判断一共9张图片是否全部加载完毕</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"开始绘制盘面"</span>);</span><br><span class="line">                drawRouletteWheel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        imgs.push(<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn_img_red.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imgFlag++;</span><br><span class="line">    <span class="keyword">if</span> (imgFlag &gt;= <span class="number">9</span>) &#123; <span class="comment">//判断一共9张图片是否全部加载完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"开始绘制盘面"</span>);</span><br><span class="line">        drawRouletteWheel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">btn_img_gray.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imgFlag++;</span><br><span class="line">    <span class="keyword">if</span> (imgFlag &gt;= <span class="number">9</span>) &#123; <span class="comment">//判断一共9张图片是否全部加载完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"开始绘制盘面"</span>);</span><br><span class="line">        drawRouletteWheel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>绘制盘面相关内容，如奖品名称、奖品价格、奖品略缩图等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绘制转盘</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawRouletteWheel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ----- ① 清空页面元素，用于逐帧动画</span></span><br><span class="line">    context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="comment">// -----</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; awards.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> _startRadian = startRadian + awardRadian * i, <span class="comment">// 每一个奖项所占的起始弧度</span></span><br><span class="line">            _endRadian = _startRadian + awardRadian; <span class="comment">// 每一个奖项的终止弧度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----- ② 使用非零环绕原则，绘制圆盘</span></span><br><span class="line">        context.save();</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            context.fillStyle = <span class="string">"#ffedee"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.fillStyle = <span class="string">"#ffffff"</span></span><br><span class="line">        &#125;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.arc(canvas.width / <span class="number">2</span> / ratio, canvas.height / <span class="number">2</span> / ratio, OUTSIDE_RADIUAS, _startRadian, _endRadian, <span class="literal">false</span>);</span><br><span class="line">        context.arc(canvas.width / <span class="number">2</span> / ratio, canvas.height / <span class="number">2</span> / ratio, INSIDE_RADIUAS, _endRadian, _startRadian, <span class="literal">true</span>);</span><br><span class="line">        context.fill();</span><br><span class="line">        context.restore();</span><br><span class="line">        <span class="comment">// -----</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----- ③ 绘制文字</span></span><br><span class="line">        context.save();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (awards[i].img) &#123;</span><br><span class="line">            context.font = _this.fontSize + <span class="string">"px bold"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.font = _this.fontSize + <span class="number">4</span> + <span class="string">"px bold"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.fillStyle = <span class="string">"#5e5d5d"</span>;</span><br><span class="line"></span><br><span class="line">        context.translate(</span><br><span class="line">            CENTER_X + <span class="built_in">Math</span>.cos(_startRadian + awardRadian / <span class="number">2</span>) * TEXT_RADIUAS,</span><br><span class="line">            CENTER_Y + <span class="built_in">Math</span>.sin(_startRadian + awardRadian / <span class="number">2</span>) * TEXT_RADIUAS</span><br><span class="line">        );</span><br><span class="line">        context.rotate(_startRadian + awardRadian / <span class="number">2</span> + <span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制图片，默认奖品在偶数位</span></span><br><span class="line">        <span class="keyword">if</span> (awards[i].img &amp;&amp; imgs[i]) &#123;</span><br><span class="line">            <span class="comment">// context.drawImage(bgImg, -context.measureText(awards[i].name).width / 2,0,50,50);</span></span><br><span class="line">            context.drawImage(imgs[i], <span class="number">-25</span>, <span class="number">-65</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 名称 当奖品带有图片的时候调整字体绘制位置和大小等相关属性</span></span><br><span class="line">        <span class="keyword">if</span> (awards[i].img) &#123;</span><br><span class="line">            <span class="keyword">if</span> (awards[i].AwardName.length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                context.fillText(awards[i].AwardName, -context.measureText(awards[i].AwardName).width / <span class="number">2</span>, <span class="number">-5</span> * (awards[i].AwardName.length - <span class="number">10</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                context.fillText(awards[i].AwardName, -context.measureText(awards[i].AwardName).width / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.fillText(awards[i].AwardName, -context.measureText(awards[i].AwardName).width / <span class="number">2</span>, <span class="number">-20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 价格</span></span><br><span class="line">        <span class="keyword">if</span> (awards[i].MdseAmount) &#123;</span><br><span class="line">            context.fillText(awards[i].MdseAmount, -context.measureText(awards[i].MdseAmount).width / <span class="number">2</span>, <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        context.restore();</span><br><span class="line">        <span class="comment">// -----</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----④绘制按钮</span></span><br><span class="line">    <span class="keyword">if</span> (!_this.disabled) &#123; <span class="comment">//disabled是控制"开始旋转"按钮是否可以点击的参数，当可以点击的时候绘制红色的按钮，当不可点击的时候绘制灰色的按钮</span></span><br><span class="line">        context.drawImage(btn_img_red, canvas.width / <span class="number">2</span> / ratio - btn_img_red.width / <span class="number">2</span> / ratio * <span class="number">1.5</span>, canvas.height / <span class="number">2</span> / ratio - btn_img_red.height / <span class="number">2</span> / ratio * <span class="number">1.5</span>, btn_img_red.width / ratio * <span class="number">1.5</span>, btn_img_red.height / ratio * <span class="number">1.5</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context.drawImage(btn_img_gray, canvas.width / <span class="number">2</span> / ratio - btn_img_gray.width / <span class="number">2</span> / ratio * <span class="number">1.5</span>, canvas.height / <span class="number">2</span> / ratio - btn_img_gray.height / <span class="number">2.5</span> / ratio * <span class="number">1.5</span>, btn_img_gray.width / ratio * <span class="number">1.5</span>, btn_img_gray.height / ratio * <span class="number">1.25</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -----</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----- ④ 绘制指针 因指针使用自定义的按钮，并绘制在图片上，故原绘制指针的方法删除</span></span><br><span class="line">    <span class="comment">// context.save();</span></span><br><span class="line">    <span class="comment">// context.beginPath();</span></span><br><span class="line">    <span class="comment">// context.moveTo(CENTER_X, CENTER_Y - OUTSIDE_RADIUAS + 8);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X - 10, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X - 4, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X - 4, CENTER_Y - OUTSIDE_RADIUAS - 10);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X + 4, CENTER_Y - OUTSIDE_RADIUAS - 10);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X + 4, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X + 10, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.closePath();</span></span><br><span class="line">    <span class="comment">// context.fill();</span></span><br><span class="line">    <span class="comment">// context.restore();</span></span><br><span class="line">    <span class="comment">// -----</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开始旋转触发方法修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 开始旋转</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateWheel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当 当前时间 大于 总时间，停止旋转，并返回当前值</span></span><br><span class="line">    spinningTime += <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">if</span> (spinningTime &gt;= spinTotalTime) &#123;</span><br><span class="line">        _this.disabled = <span class="literal">false</span>;</span><br><span class="line">        _this.$emit(<span class="string">'end'</span>); <span class="comment">//当转盘停止转动的时候触发end回调</span></span><br><span class="line">        drawRouletteWheel(); <span class="comment">//当结束的时候重新绘制一次转盘，保证按钮是可转动的状态对应的按钮</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _this.disabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> _spinningChange = (spinningChange - easeOut(spinningTime, <span class="number">0</span>, spinningChange, spinTotalTime)) * (<span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line">    startRadian += _spinningChange;</span><br><span class="line"></span><br><span class="line">    drawRouletteWheel();</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(rotateWheel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听点击事件，开始旋转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">_this.$refs[<span class="string">"spin_button"</span>].addEventListener(<span class="string">"click"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_this.disable) &#123; <span class="comment">//控制抽奖次数的参数</span></span><br><span class="line">        <span class="keyword">if</span> (!_this.disabled) &#123; <span class="comment">//控制是否重复点击的参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取奖品在数组中的下标</span></span><br><span class="line">            <span class="keyword">if</span> (getIndex() !== <span class="literal">false</span>) &#123;</span><br><span class="line">                listIndex = getIndex();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">"请确定中奖奖品是否在奖品列表中"</span>);</span><br><span class="line">                _this.clear = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getIndex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> i = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">let</span> notWonIndex = <span class="literal">null</span>;</span><br><span class="line">                _this.list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.AwardNo) &#123;</span><br><span class="line">                        <span class="comment">// if (_this.prize === item.AwardNo) &#123;</span></span><br><span class="line">                        <span class="comment">//   i = index;</span></span><br><span class="line">                        <span class="comment">// &#125; else if (item.AwardNo === "MDSE999999999999999") &#123;</span></span><br><span class="line">                        <span class="comment">//   notWonIndex = index;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (_this.prize === item.AwardNo) &#123;</span><br><span class="line">                            i = index;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            notWonIndex = index;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.warn(<span class="string">"请确认奖品编号字段是否存在"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (!notWonIndex) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.warn(<span class="string">"奖品编号不存在，自动设置为谢谢参与"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> notWonIndex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取中奖奖品旋转的起始角度</span></span><br><span class="line">            turnStartRadian = awardRadian * listIndex; <span class="comment">// 获取中奖奖品的起始角度</span></span><br><span class="line">            turnEndRadian = awardRadian * listIndex + awardRadian; <span class="comment">// 获取中奖奖品的结束角度</span></span><br><span class="line"></span><br><span class="line">            spinningTime = <span class="number">0</span>; <span class="comment">// 初始化当前时间</span></span><br><span class="line">            startRadian = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 初始化弧度</span></span><br><span class="line">            spinTotalTime = <span class="number">5</span> * <span class="number">1000</span>; <span class="comment">// 随机定义一个时间总量</span></span><br><span class="line"></span><br><span class="line">            prizeAngle = awardRadian * <span class="number">180</span> / <span class="built_in">Math</span>.PI * <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>) / <span class="number">10</span>; <span class="comment">//该参数是确定奖品的对应角度(360°内)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prizeAngle &gt; <span class="number">0.7</span> * (<span class="number">360</span> / _this.list.length)) &#123;</span><br><span class="line">                prizeAngle = <span class="number">0.7</span> * (<span class="number">360</span> / _this.list.length)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prizeAngle &lt; <span class="number">0.3</span> * (<span class="number">360</span> / _this.list.length)) &#123;</span><br><span class="line">                prizeAngle = <span class="number">0.3</span> * (<span class="number">360</span> / _this.list.length)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            spinningChange = (turnStartRadian * <span class="number">180</span> / <span class="built_in">Math</span>.PI - <span class="number">90</span> * (listIndex + <span class="number">1</span>) % <span class="number">360</span> - prizeAngle + <span class="number">360</span> * turns) / <span class="number">124.5</span>; <span class="comment">//根据相应的角度算出大转盘的旋转速率，保证转盘停止转动的时候能落在我们想落在的位置</span></span><br><span class="line">            </span><br><span class="line">            rotateWheel();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'请勿重复点击'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'今日抽奖次数已用完'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上的修改均在<code>vue</code>的<code>mounted</code>生命周期之内进行，此时需要进行相应的修改，整个vue组件大概结构如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">"Lottery"</span>,</span><br><span class="line">props: &#123;</span><br><span class="line">  <span class="comment">// 获取数组</span></span><br><span class="line">  disable: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 盘面奖品list</span></span><br><span class="line">  list: &#123;</span><br><span class="line">    type: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!val || val.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"请确认转盘盘面奖项列表"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置中奖奖项</span></span><br><span class="line">  prize: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置奖品字体</span></span><br><span class="line">  fontSize: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置旋转圈数</span></span><br><span class="line">  turns: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">5</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 控制转盘转动</span></span><br><span class="line">  run: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    disabled: <span class="literal">false</span>, <span class="comment">//控制大转盘是否可以点击</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>; <span class="comment">//将vue的this值赋予_this，目的是防止之后this被污染导致获取不到正确的值</span></span><br><span class="line">    <span class="comment">// ......对应的代码</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  run(val) &#123; <span class="comment">//监听run的变化，当run变化的时候触发spin_button的click事件</span></span><br><span class="line">    <span class="keyword">if</span> (val &amp;&amp; !<span class="keyword">this</span>.disabled) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs[<span class="string">"spin_button"</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 点击按钮遮罩</span></span><br><span class="line">  clickBtn() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.run &amp;&amp; !<span class="keyword">this</span>.disabled) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"开始旋转"</span>);</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'start'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"请勿重复点击"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="四、效果图"><a href="#四、效果图" class="headerlink" title="四、效果图"></a>四、效果图</h5><p><img src="/2019/02/26/components/LotteryComponent/Lottery/lottery.gif" alt="大转盘效果图"></p><p>本文部分内容转载自<a href="https://github.com/muzqi" target="_blank" rel="noopener">@木子七</a>的<a href="https://juejin.im/post/5992b6065188257dd3664dbc" target="_blank" rel="noopener">大转盘文章</a></p>]]></content>
      
      
      <categories>
          
          <category> vue组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise对象学习</title>
      <link href="/2019/02/26/JavaScript/PromiseStudy/Promise/"/>
      <url>/2019/02/26/JavaScript/PromiseStudy/Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise学习"><a href="#Promise学习" class="headerlink" title="Promise学习"></a>Promise学习</h1><h5 id="一、回调函数的问题"><a href="#一、回调函数的问题" class="headerlink" title="一、回调函数的问题"></a>一、回调函数的问题</h5><p>学过 JavaScript 的人都应该清楚一件事，JavaScript语言的一大特点就是<code>单线程</code>，目的是为了提高效率。因此在 JavaScript 中回调函数不会立即执行，而是由事件轮询去检测事件是否执行完毕，当执行完毕并且有结果之后，将执行结果放入回调函数中，然后将回调函数添加到事件队列中等待被执行。</p><p>在这里会有一些关于回调函数的问题：</p><ol><li>“回调地狱”：即“洋葱模型”，回调函数作为异步函数的参数，会形成多级的嵌套，当嵌套级数过多时，代码逻辑会变得混乱，无法将错误的捕捉和处理这个简单的工作做好，只能在回调函数的内部通过<code>try{}...catch(){}</code>捕获并处理异常。</li><li>回调函数的执行方式不符合自然语言的线性思维方式，不易理解。</li><li>控制反转，即控制权不在我们手中，而是在其他人的代码中。例如该异步函数是第三方库，当我们把回调函数传给第三方库的时候，我们并不能知道我们的异步函数在第三方库里做了什么，在调用回调函数之前做了什么。</li></ol><p>解决回调函数的问题有很多种方法，其中比较好的一种方式就是使用 Promise 对象。</p><h5 id="二、什么是Promise"><a href="#二、什么是Promise" class="headerlink" title="二、什么是Promise"></a>二、什么是Promise</h5><p>Promise 是目前在 JavaScript 异步编程中比较流行的解决方案之一，Promise 用于表示一个异步操作的最终状态（完成或者失败），并且可以链式的处理异步请求（<code>.then()</code>方法），很好的处理异常问题，是解决回调地狱的良好方案之一。MDN对 Promise 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener">解释</a>如下：</p><blockquote><p><code>Promise</code> 对象是一个代理对象（代理一个值），被代理的值在 <code>Promise</code>对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的 <code>promise</code>对象。</p></blockquote><h5 id="三、Promise-的状态"><a href="#三、Promise-的状态" class="headerlink" title="三、Promise 的状态"></a>三、Promise 的状态</h5><p>Promise 一共包含有三种状态：</p><ol><li><code>pending</code>：初始状态，既不是成功状态，也不是失败状态，在网上多数人称为<code>等待中</code>状态。</li><li><code>fulfilled</code>：成功状态，意味着操作成功完成。</li><li><code>rejected</code>：失败状态，意味着操作失败。</li></ol><p>Promise 无论如何都会返回一个结果，不是成功，就是失败。并且 Promise 的设计具有原子性，即当状态从<code>pending</code>状态转变为<code>fulfilled</code>状态或者<code>rejected</code>状态后，将不能改变。</p><p>在<code>pending</code>状态中，Promise 可能触发<code>fulfilled</code>状态并将成功结果传递给相应的状态处理方法，也可能触发<code>rejected</code>状态并将失败信息返回。</p><p><img src="/2019/02/26/JavaScript/PromiseStudy/Promise/promises.png" alt="图源自[@MDN的Promise文档](https://mdn.mozillademos.org/files/8633/promises.png)"></p><p>(图片来自<a href="https://mdn.mozillademos.org/files/8633/promises.png" target="_blank" rel="noopener">@MDN</a>)</p><h5 id="四、Promise-的原理"><a href="#四、Promise-的原理" class="headerlink" title="四、Promise 的原理"></a>四、Promise 的原理</h5><p>从本文前面的内容中可知 Promise 有三个状态，并且会返回一个成功或者失败的结果。</p><p><img src="/2019/02/26/JavaScript/PromiseStudy/Promise/0.png" alt="图源来自[《JS异步编程之Promise》](https://juejin.im/post/5c724f14518825626b76f6d5)"></p><p>(图来自于<a href="https://juejin.im/post/5c724f14518825626b76f6d5" target="_blank" rel="noopener">https://juejin.im/post/5c724f14518825626b76f6d5</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Promise构造器执行"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            resolve(<span class="string">"成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">"失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// return Promise.resolve(1);  // 返回一个决议为成功的 Promise 实例</span></span><br><span class="line">    <span class="comment">// return Promise.reject("error");  // 返回一个决议为拒绝的 Promise 实例</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// .then() 方法会返回一个 Promise, 完成调用的参数为前一个 Promise 的返回值或者决议值。</span></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"抛出错误"</span>); <span class="comment">// 抛出错误是隐式拒绝</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Continue to do other things</span></span><br><span class="line">&#125;)</span><br><span class="line">.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"finally"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="五、Promise-的语法"><a href="#五、Promise-的语法" class="headerlink" title="五、Promise 的语法"></a>五、Promise 的语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;...&#125; <span class="comment">/* executor */</span>  );</span><br></pre></td></tr></table></figure><p>参数：</p><p><code>executor</code>：</p><ul><li><code>executor</code>函数带有<code>resolve</code>和<code>reject</code>两个参数。当 Promise 构造函数在执行时会<strong>立即调用</strong><code>executor</code>函数，<code>executor</code>函数在 Promise 构造函数返回新建对象之前会被调用，并将<code>resolve</code>和<code>reject</code>两个函数作为参数传递给<code>executor</code>函数。在<code>executor</code>函数内部通常会执行一些异步操作，并在异步操作完成时调用<code>resolve</code>函数或者<code>reject</code>函数将 promise 的状态修改为<code>fulfilled(成功)</code>或者<code>rejected(失败)</code></li><li>只要在<code>executor</code>函数中抛出一个错误，promise 的状态就会转换为<code>rejected</code>，此时<code>executor</code>函数的返回值将会被忽略。</li></ul><h5 id="六、Promise-的属性"><a href="#六、Promise-的属性" class="headerlink" title="六、Promise 的属性"></a>六、Promise 的属性</h5><ul><li><p><code>Promise.length</code>：</p><p> Promise 的 length 属性，其值始终为 1，即构造器参数的数目。</p></li><li><p><code>Promise.prototype</code>：</p><p> Promise 构造器的原型。</p></li></ul><h5 id="七、Promise-的方法"><a href="#七、Promise-的方法" class="headerlink" title="七、Promise 的方法"></a>七、Promise 的方法</h5><ul><li><p><code>Promise.all(iterable)</code>：</p><p>当 promise 对象中 iterable 参数对象里所有的 promise 对象都成功执行的时候触发的一个方法，若 iterable 中有任何一个 promise 对象执行失败则会立即触发该 promise 对象的失败。该方法在触发成功状态之后，会将 iterable 参数里所有 promise 对象返回值放入一个数组中并将该数组作为成功回调的返回值，该数组中各个 promise 对象的返回值顺序与 iterable 的顺序保持一致。如果触发了失败状态，则该方法会将第一个触发失败状态的 promise 对象的错误信息作为它的错误信息返回。该方法常用于处理多个 promise 对象的状态合集。</p></li><li><p><code>Promise.race(iterable)</code>：</p><p>iterable 参数中只要有一个 promise 对象触发了额成功状态或者失败状态，就会将该 promise 对象的值作为它的返回值。</p></li><li><p><code>Promise.reject(reason)</code>：</p><p>返回一个状态为失败的 Promise 对象，并将给定的失败信息传递给对应的处理方法。</p></li><li><p><code>Promise.resolve(value)</code>：</p></li></ul><blockquote><p>返回一个状态由给定 value 决定的 Promise 对象。如果该值是一个 Promise 对象，则直接返回该对象；如果该值是 thenable (即，带有<code>.then()</code>方法的对象)，返回的 Promise 对象的最终状态由<code>.then()</code>方法执行决定；否则的话(该 value 为空，基本类型或者不带<code>.then()</code>方法的对象)，返回的 Promise 对象状态为<code>fulfilled</code>，并且将该 value 传递给对应的<code>.then()</code>方法。通常而言，如果你不知道一个值是否是 Promise 对象，使用<code>Promise.resolve(value)</code> 来返回一个 Promise 对象,这样就能将该 value 以 Promise 对象形式使用。</p></blockquote><h5 id="八、Promise-的原型"><a href="#八、Promise-的原型" class="headerlink" title="八、Promise 的原型"></a>八、Promise 的原型</h5><ul><li><p>属性：</p><ul><li><p><code>Promise.prototype.construtor</code>：</p><p>返回被创建的实例函数.  默认为 Promise 函数。</p></li></ul></li><li><p>方法：</p><ul><li><p><code>Promise.prototype.catch(onRejected)</code>：</p><p>当<code>.then()</code>方法中发生错误时，<code>.catch()</code>方法会捕获并处理错误，并将一个<code>rejection(拒绝)</code>回调到当前的 promise，然后返回一个新的 promise。新的 promise 以<code>.catch()</code>的返回值来 resolve。</p></li><li><p><code>Promise.prototype.then(onFulfilled, onRejected)</code>：</p><p>在当前的 promise 中添加<code>fulfilled(解决)</code>回调和<code>rejuection(拒绝)</code>回调，并以回调的返回值来 resolve。</p></li><li><p><code>Promise.prototype.finally(onFinally)</code>：</p><p>无论 promise 的状态是处于<code>fulfilled(成功)</code>状态还是<code>rejected(失败)</code>状态，都会调用的一个方法，并且在该回调中返回一个新的 promise 对象。</p></li></ul></li></ul><h5 id="九、Promise-的优势"><a href="#九、Promise-的优势" class="headerlink" title="九、Promise 的优势"></a>九、Promise 的优势</h5><ol><li><p>链式调用：</p><p>Promise 在使用后会返回一个新的 Promise 便于我们传递状态参数。同时因为其链式的写法更接近于同步写法，更加符合线性思维。</p></li><li><p>错误捕捉：</p><p>Promise 能够为链式异步调用提供错误处理。</p></li><li><p>控制权的再次反转：</p><p>第三方提供的异步函数我们无法保证回调函数如何被执行，但是通过 Promise 我们能够保证 resolve 只会执行一次，并且 Promise 始终以异步的形式执行。</p></li><li><p>解决未决议和并行嵌套的问题：</p><p>Promise 的<code>Promise.all(iterable)</code>方法和<code>Promise.race(iterable)</code>方法可以用于解决 Promise 始终未决议和并行 Promise 嵌套的问题。</p></li></ol><h5 id="十、Promise对象的不足"><a href="#十、Promise对象的不足" class="headerlink" title="十、Promise对象的不足"></a>十、Promise对象的不足</h5><ol><li><p>每个<code>.then()</code>方法都是一个独立的作用域：</p><p>当我们加入多个<code>.then()</code>方法时，会创建多个独立的作用域，要想解决作用域的数据共享问题需要在外层包裹一层函数作用域实现闭包。</p></li><li><p><code>.then()</code>无法取消：</p><p><code>.catch()</code>能捕获并处理 Promise 链中任意一个<code>.then()</code>方法中的错误，但是不会中断整个 Promise 链的执行。</p></li><li><p>无法得知进度：</p><p>Promise 只会从<code>pending</code>状态转变为<code>fullfilled</code>状态或者<code>rejected</code>状态，所以我们无法得知<code>pending</code>阶段的进度。</p></li></ol><h5 id="十一、应用-Promise-的简单例子"><a href="#十一、应用-Promise-的简单例子" class="headerlink" title="十一、应用 Promise 的简单例子"></a>十一、应用 Promise 的简单例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Promise 对ajax进行封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">method, url, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">var</span> method = method || <span class="string">"GET"</span>;</span><br><span class="line">        <span class="keyword">var</span> data = data || <span class="literal">null</span>;</span><br><span class="line">        xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                resolve(xhr.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(xhr.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send(data);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">fetch(<span class="string">"GET"</span>, <span class="string">"/api"</span>, <span class="literal">null</span>)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 nodejs error first 风格回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       fs.readFile(url,<span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(data)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h6 id="参考资料（排名不分先后顺序）"><a href="#参考资料（排名不分先后顺序）" class="headerlink" title="参考资料（排名不分先后顺序）"></a>参考资料（排名不分先后顺序）</h6><ol><li><a href="https://juejin.im/post/5c724f14518825626b76f6d5" target="_blank" rel="noopener">@南波的《JS异步编程之Promise》</a></li><li><a href="https://juejin.im/post/5c691ef851882562c0496759" target="_blank" rel="noopener">@南波的《JS异步编程之callback》</a></li><li><a href="https://juejin.im/post/5c71927c6fb9a049cd54d2de" target="_blank" rel="noopener">@蟹丸的《前端异步技术之Promise》</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">MDN的Promise文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
