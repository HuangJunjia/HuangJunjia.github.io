<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>github+hexo搭建一个Blog</title>
      <link href="/2019/02/26/blog/blog-build/"/>
      <url>/2019/02/26/blog/blog-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天突发奇想，自己搭建一个blog就可以不用github那个markdown来撰写我的博文了，然后去百度搜了一下，网友推荐了使用Hexo（当然还有其他）搭建一个自己的blog。</p></blockquote><h5 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h5><ul><li>一个GitHub帐号</li><li>一个名称为YourName.github.io的仓库</li><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li></ul><blockquote><p>前4步操作直接百度就好，我在此主要讲建立Blog的主要过程以及一些需要注意的问题和坑。因为我个人使用的是Windows的系统，在此不讲解其他系统的搭建过程，但是大同小异，可以参考。</p></blockquote><h5 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h5><ol><li><p>在确保你安装好<code>Git</code>的前提下，在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>然后在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo v</span><br></pre></td></tr></table></figure><p>若出现下图则说明你已经成功安装<code>Hexo。</code></p><p><img src="/2019/02/26/blog/blog-build/hexo-v.png" alt="安装成功示例图"></p></li><li><p>创建一个目录，作为你的blog目录。</p></li><li><p>进入该目录。</p><p><img src="/2019/02/26/blog/blog-build/cd-blog.png" alt="示例图"></p></li><li><p>初始化该目录，初始化的过程可能会稍微花费一些时间；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>当终端中显示<code>INFO Start blogging with Hexo!</code>的时候说明初始化成功了。</p><p><img src="/2019/02/26/blog/blog-build/hexo-init.png" alt="示例图"></p></li><li><p>安装<code>Hexo</code>运行所需要的相关组件及依赖；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install //或者 yarn 我个人推荐使用后者</span><br></pre></td></tr></table></figure><p><img src="/2019/02/26/blog/blog-build/npm-install.png" alt="示例图"></p><p>如果终端中未出现<code>ERROR</code>等错误提示，<code>WARN</code>警告我们直接忽略就好。</p></li><li><p>在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动服务器，</p><p><img src="/2019/02/26/blog/blog-build/hexo-s.png" alt="示例图"></p><p>如此显示说明<code>Hexo</code>已经启动了，我们就可以进入有下划线的网址<code>http://localhost:4000</code>浏览我们的博客长啥样了。</p><p><img src="/2019/02/26/blog/blog-build/hexo-index.png" alt="示例图"></p><p>到此为止，<code>Hexo</code>的安装已经结束了。</p></li></ol><h5 id="三、将我们的Hexo博客部署在我们的Username-github-io仓库中"><a href="#三、将我们的Hexo博客部署在我们的Username-github-io仓库中" class="headerlink" title="三、将我们的Hexo博客部署在我们的Username.github.io仓库中"></a>三、将我们的Hexo博客部署在我们的<code>Username.github.io</code>仓库中</h5><ol><li><p>新建一个仓库，仓库名必须为<code>xxx.github.io</code>，一般xxx与你GitHub昵称相同。</p><p><img src="/2019/02/26/blog/blog-build/new-repo.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/add-repo.png" alt="示例图"></p></li><li><p>因为<code>Hexo</code>部署需要通过GitHub的ssh连接，所以需要配置一个<code>ssh key</code>，配置方法百度即可。</p></li><li><p>安装<code>hexo-deployer-git</code>插件（非常重要）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git //或者 yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>修改<code>Hexo</code>的配置文件<code>_config.yml</code>，连接你的GitHub仓库，</p><p><img src="/2019/02/26/blog/blog-build/deploy.png" alt="示例图"></p><p><code>type</code>设置为<code>git</code>，<code>repo</code>填写你的GitHub仓库地址，<code>branck</code>填写<code>master</code></p><p><img src="/2019/02/26/blog/blog-build/github-repo.png" alt="示例图"></p></li><li><p>在终端中按住<code>ctrl + c</code>结束正在运行的<code>Hexo</code>服务，然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g //生成部署的文件，在public目录下</span><br></pre></td></tr></table></figure><p><img src="/2019/02/26/blog/blog-build/hexo-g.png" alt="示例图"></p><p>接着输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d //将生成的部署文件上传到我们之前新建的GitHub仓库中</span><br></pre></td></tr></table></figure><blockquote><p>因为打印的日志有点多，我就截取主要部分。</p></blockquote><p><img src="/2019/02/26/blog/blog-build/hexo-d-1.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/hexo-d-2.png" alt="示例图"></p><p>出现最后一行说明我们已经成功的将我们的<code>Hexo</code>blog部署到我们的GitHub仓库中了。</p><p>这时我们可以打开GitHub进入我们的仓库查看上传的文件有哪些。</p><p><img src="/2019/02/26/blog/blog-build/github-new.png" alt="示例图"></p><p>到这里就差最后一步了！</p></li><li><p>修改GitHub仓库设置，在<code>GitHub Pages</code>中修改选中的分支，将分支修改为<code>master branch</code>，等待页面刷新之后，我们就可以拿到<code>https://xxx.github.io</code>这个网址了~（这里因为我之前有建立过blog，所以就直接拿我之前blog的设置来做例子了~）</p><p><img src="/2019/02/26/blog/blog-build/repo-setting.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/page-setting.png" alt="示例图"></p><p><img src="/2019/02/26/blog/blog-build/get-address.png" alt="示例图"></p></li><li><p>这个时候，我们打开网址，即<code>https://xxx.github.io</code>，就可以看到我们的<code>Hexo</code>博客了！记得xxx是你当初设置的~记得替换。（可能在设置完GitHub Pages之后需要等个几分钟才能看到我们的页面）</p></li></ol><h5 id="四、安装过程中可能会碰到的问题"><a href="#四、安装过程中可能会碰到的问题" class="headerlink" title="四、安装过程中可能会碰到的问题"></a>四、安装过程中可能会碰到的问题</h5><ul><li><p>问题1：4000端口被占用，无法启动服务</p><p><img src="/2019/02/26/blog/blog-build/hexo-s-err.png" alt="示例图"></p><p>解决方法：改变服务器的端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 端口号 // 端口号可以是未被占用的</span><br></pre></td></tr></table></figure><p><img src="/2019/02/26/blog/blog-build/hexo-s-p.png" alt="示例图"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐 for electron开发日记</title>
      <link href="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/"/>
      <url>/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介：使用electron-vue模版开发，非常感谢<a href="https://github.com/SimulatedGREG" target="_blank" rel="noopener">@Greg Holguin</a>大大的electron-vue项目，以及使用的网易云音乐nodejs版的api的作者<a href="https://github.com/Binaryify" target="_blank" rel="noopener">@Binaryify</a>大大，他们俩是促使我尝试制作这个项目的原因。</p></blockquote><hr><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/HuangJunjia/3rdNeteaseCloudDemo" target="_blank" rel="noopener">网易云音乐 for electron</a></p><hr><h3 id="开发进度"><a href="#开发进度" class="headerlink" title="开发进度"></a>开发进度</h3><blockquote><ol><li>header部分<ul><li>logo区域：<ul><li>已完成<ul><li>icon的设置，title的设置</li></ul></li><li>未完成<ul><li>无</li></ul></li></ul></li><li>search区域：<ul><li>已完成：<ul><li>样式设计和编写</li><li>input事件触发搜索结果</li></ul></li><li>未完成：<ul><li>点击搜索图标跳转至搜索结果页面未制作</li><li>点击input触发的推荐结果跳转至对应的结果页未制作</li></ul></li></ul></li><li>setting区域：<ul><li>已完成：<ul><li>完成图标的制作</li></ul></li><li>未完成：<ul><li>对应功能未实现</li></ul></li></ul></li></ul></li></ol><ul><li>视窗操作区域：<ul><li>已完成：<ul><li>图标按钮</li><li>当前窗口最小化、最大化/还原、关闭操作</li></ul></li><li>未完成：<ul><li>无</li></ul></li></ul></li></ul></blockquote><h3 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h3><h5 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h5><ol><li><p>node.js  <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网</a></p></li><li><p>vue  <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>electron-vue模版  <a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">项目地址</a></p><blockquote><p>该项目的目的，是为了要避免使用 vue 手动建立起 electron 应用程序。electron-vue 充分利用 <code>vue-cli</code> 作为脚手架工具，加上拥有 <code>vue-loader</code> 的 <code>webpack</code>、<code>electron-packager</code> 或是 <code>electron-builder</code>，以及一些最常用的插件，如<code>vue-router</code>、<code>vuex</code> 等等。</p></blockquote><p>以上为官网介绍。</p><p>安装方式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装 vue-cli 和 脚手架样板代码</span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br><span class="line"></span><br><span class="line"># 安装依赖并运行你的程序</span><br><span class="line">cd my-project</span><br><span class="line">yarn # 或者 npm install</span><br><span class="line">yarn run dev # 或者 npm run dev</span><br></pre></td></tr></table></figure></li><li><p>拉取网易云音乐 Node.js API service的github项目  <a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="noopener">项目地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务"><a href="#二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务" class="headerlink" title="二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务"></a>二、将网易云音乐API整合到electron-vue项目中并能够顺利启动服务</h5><p>该项目的网易云API是已经封装好的，但是需要单独的启动node.js，端口为3000，这样会显得比较麻烦，直接使用一个node.js的配置文件就足够了。</p><blockquote><p>ps：因为该项目目前还在保持更新，若大家怕在后续的更新中需要重新修改配置，推荐大家直接在网易云API中直接启动node服务，我这里只是提供了我需要的一种方式。</p></blockquote><p>过程：</p><ol><li><p>拷贝网易云音乐API目录下的./module和./util目录，复制到electron-vue项目根目录下，此时目录结构应该如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">electron-vue</span><br><span class="line">|-- .electron-vue</span><br><span class="line">|-- build</span><br><span class="line">|-- dist</span><br><span class="line">|-- node_modules</span><br><span class="line">|-- module</span><br><span class="line">|-- src</span><br><span class="line">|-- static</span><br><span class="line">|-- util</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>将网易云音乐API目录下app.js中的代码复制到electron-vue目录下的.electron-vue/dev-runner.js中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'../util/request'</span>)</span><br><span class="line"><span class="keyword">const</span> cache = <span class="built_in">require</span>(<span class="string">'apicache'</span>).middleware</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"># 以下为网易云API的node服务代码</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// CORS</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.path !== <span class="string">'/'</span> &amp;&amp; !req.path.includes(<span class="string">'.'</span>))&#123;</span><br><span class="line">    res.header(&#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: req.headers.origin || <span class="string">'*'</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Requested-With'</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'PUT,POST,GET,DELETE,OPTIONS'</span>,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cookie parser</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  req.cookies = &#123;&#125;, (req.headers.cookie || <span class="string">''</span>).split(<span class="regexp">/\s*;\s*/</span>).forEach(<span class="function"><span class="params">pair</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> crack = pair.indexOf(<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">if</span>(crack &lt; <span class="number">1</span> || crack == pair.length - <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">    req.cookies[<span class="built_in">decodeURIComponent</span>(pair.slice(<span class="number">0</span>, crack)).trim()] = <span class="built_in">decodeURIComponent</span>(pair.slice(crack + <span class="number">1</span>)).trim()</span><br><span class="line">  &#125;)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// body parser</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// cache</span></span><br><span class="line">app.use(cache(<span class="string">'2 minutes'</span>, (<span class="function">(<span class="params">req, res</span>) =&gt;</span> res.statusCode === <span class="number">200</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// router</span></span><br><span class="line"><span class="keyword">const</span> special = &#123;</span><br><span class="line">  <span class="string">'daily_signin.js'</span>: <span class="string">'/daily_signin'</span>,</span><br><span class="line">  <span class="string">'fm_trash.js'</span>: <span class="string">'/fm_trash'</span>,</span><br><span class="line">  <span class="string">'personal_fm.js'</span>: <span class="string">'/personal_fm'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.readdirSync(path.join(__dirname, <span class="string">'../module'</span>)).reverse().forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!(<span class="regexp">/\.js$/i</span>.test(file))) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> route = (file <span class="keyword">in</span> special) ? special[file] : <span class="string">'/'</span> + file.replace(<span class="regexp">/\.js$/i</span>, <span class="string">''</span>).replace(<span class="regexp">/_/g</span>, <span class="string">'/'</span>)</span><br><span class="line">  <span class="keyword">let</span> question = <span class="built_in">require</span>(path.join(__dirname, <span class="string">'../module'</span>, file))</span><br><span class="line"></span><br><span class="line">  app.use(route, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> query = <span class="built_in">Object</span>.assign(&#123;&#125;, req.query, req.body, &#123;<span class="attr">cookie</span>: req.cookies&#125;)</span><br><span class="line">    question(query, request)</span><br><span class="line">      .then(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[OK]'</span>, <span class="built_in">decodeURIComponent</span>(req.originalUrl))</span><br><span class="line">        res.append(<span class="string">'Set-Cookie'</span>, answer.cookie)</span><br><span class="line">        res.status(answer.status).send(answer.body)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(answer)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[ERR]'</span>, <span class="built_in">decodeURIComponent</span>(req.originalUrl))</span><br><span class="line">        <span class="keyword">if</span>(answer.body.code ==<span class="string">'301'</span>) answer.body.msg = <span class="string">'需要登录'</span></span><br><span class="line">        res.append(<span class="string">'Set-Cookie'</span>, answer.cookie)</span><br><span class="line">        res.status(answer.status).send(answer.body)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span> <span class="comment">//在这里修改端口号</span></span><br><span class="line"></span><br><span class="line">app.server = app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server running @ http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></li></ol><hr><p>20190201更新：</p><pre><code>我将网易云音乐API node服务放在了我的服务器上，所以我这里直接使用我的服务器地址。&lt;font color=#ff0000&gt;推荐为网易云API单独启动一个node服务，然后通过pm2进行管理。&lt;/font&gt;</code></pre><hr><ol start="3"><li><p>启动electron-vue的node服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn dev //或者 npm run dev</span><br></pre></td></tr></table></figure><p> 此时控制台应打印出</p><p> <img src="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/1.png" alt="控制台打印内容"></p><p> 稍等一会你会看到一个electron应用自动启动，说明node服务正式配置完毕。</p></li></ol><p>四、electron服务配置反向代理</p><ol><li><p>因为在electron-vue中需要用到网易云音乐API服务器的接口，但是网易云音乐API服务器端口为3000（或许你自定了一个端口），如果直接调用，会报跨域的错误，提示404</p><p><img src="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/2.png" alt="报错图片"></p><p>此时需要在electron-vue的.electron-vue/dev-runner.js中的electron服务中配置一个代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------- electron-vue的node服务 -----------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRenderer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(</span><br><span class="line">          compiler,</span><br><span class="line">          &#123;</span><br><span class="line">            contentBase: path.join(__dirname, <span class="string">'../'</span>),</span><br><span class="line">            quiet: <span class="literal">true</span>,</span><br><span class="line">            before (app, ctx) &#123;</span><br><span class="line">              app.use(hotMiddleware)</span><br><span class="line">              ctx.middleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*---- 以下是添加的代理设置 ----*/</span></span><br><span class="line">            proxy: &#123;</span><br><span class="line">              <span class="string">"/api"</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>, <span class="comment">//指向网易云音乐API nodejs 服务器地址</span></span><br><span class="line">                <span class="comment">//也可以使用你自己的服务器地址，但是方法同理</span></span><br><span class="line">                pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">''</span>&#125;,</span><br><span class="line">                changeOrigin: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*---- 代理设置到此结束 ----*/</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">｝----</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="三、遇到的问题及解决方案"><a href="#三、遇到的问题及解决方案" class="headerlink" title="三、遇到的问题及解决方案"></a>三、遇到的问题及解决方案</h5><ol><li><p>问题：在使用<code>tray</code>设置托盘的时候，在<code>dev</code>环境下能正常运行，但是打包成<code>.exe</code>文件之后提示icon错误。</p><p><img src="/2019/02/26/NeteseCloudMusic/FullApp/NeteseCloudMusicDiary/3.png" alt="图源自stack overflow"></p><p>原因：需要引入<code>electron</code>中的<code>nativeImage</code>模块，将icon转换成原生的图片。</p><p>解决方案：</p><ul><li><p>原代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tray = <span class="keyword">new</span> Tray(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/build/icon.ico`</span>);</span><br></pre></td></tr></table></figure></li><li><p>修改之后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Tray, nativeImage &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iconPath = path.join(__dirname, <span class="string">'build/icon.ico'</span>);</span><br><span class="line">mainWindow.tray = <span class="keyword">new</span> Tray(nativeImage.createFromPath(iconPath));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>问题：在electron-vue中的页面里使用vuex报错，提示<code>undefind</code>。</p><p>原因：在electron-vue中为了实现多窗口之间能共享vuex的数据，引入了一个<code>vuex-electron</code>的插件，修改了vuex的配置方式。</p><p>解决方案：</p><pre><code>按照`vuex-electron`的方式设置vuex，在`src/renderer/store/modules`中新建一个`NewStore.js`，并在该文件内编写`state`、`mutations`、`actions`</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="comment">// your state code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// your mutations code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// your actions code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云音乐 </tag>
            
            <tag> electron-vue </tag>
            
            <tag> vue </tag>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习</title>
      <link href="/2019/02/26/GitStudy/git-study-1/"/>
      <url>/2019/02/26/GitStudy/git-study-1/</url>
      
        <content type="html"><![CDATA[<h4 id="使用git过程中的经验整理"><a href="#使用git过程中的经验整理" class="headerlink" title="使用git过程中的经验整理"></a>使用git过程中的经验整理</h4><blockquote><p>因为最近在用git添加多个sshkey的时候报错了，使用ssh -V github.com的时候提示key不存在，在不存在的网站(google.com)中找到了解决方案，然后想了想，决定开一个blog专门记录使用git的时候出现的问题以及对应的解决方案。</p></blockquote><h5 id="一、添加多个sshkey"><a href="#一、添加多个sshkey" class="headerlink" title="一、添加多个sshkey"></a>一、添加多个sshkey</h5><ol><li><p>首先执行命令生成第一个git仓库的sshkey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;first-email@address.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>再次执行命令生成第二个git仓库的sshkey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;secound-email@address.com&quot;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意，在生成不同的sshkey的时候记得给每个sshkey起不同的名字。</p></blockquote><ol start="3"><li><p>修改git配置</p><p>这一个操作有两个方法，一个是最常用的方法，也是随便搜索都能找到的方法：</p><ol><li><p>方法1：在<code>~/.ssh</code>目录下新建一个config文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># first-website</span><br><span class="line">Host gitlab.com</span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line"></span><br><span class="line"># second-website</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></li><li><p>方法2：该方法是否规范我不太确定，但是这么做是修改了git里ssh的配置</p><p>修改git目录下的<code>git/etc/ssh/ssh_config</code>文件，在文件的最下面添加连接仓库用到的sshkey文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"># Added by git-extra</span><br><span class="line"></span><br><span class="line"># 在下方添加我们需要通过ssh连接的git仓库对应的sshkey文件</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line">IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line"></span><br><span class="line">Ciphers +aes128-cbc,3des-cbc,aes256-cbc,aes192-cbc</span><br></pre></td></tr></table></figure><p>然后重启git</p></li></ol></li><li><p>之后再连接不同的git仓库就能顺利的连接了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue大转盘组件</title>
      <link href="/2019/02/26/components/LotteryComponent/Lottery/"/>
      <url>/2019/02/26/components/LotteryComponent/Lottery/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个大转盘抽奖组件，可以自定义盘面，包括颜色、字体、图片等内容。</p></blockquote><p>感谢<a href="https://github.com/muzqi" target="_blank" rel="noopener">@木子七</a>大佬的大转盘文章<a href="https://juejin.im/post/5992b6065188257dd3664dbc" target="_blank" rel="noopener">这里是连接</a>，在之后的使用中发现不能设置奖品并将奖品转动到对应的扇形盘面上，对此我进行了修改，使其可以在<code>vue</code>中正常使用，可能修改的并不好，希望各位指出。</p><p>实现过程我就不再重复编辑了，木子七大佬的文章中以及他的github中对大转盘的实现有详细的描述以及代码实现。在此我只对我改进的部分代码进行示例以及解释。</p><h5 id="一、解决大转盘清晰度"><a href="#一、解决大转盘清晰度" class="headerlink" title="一、解决大转盘清晰度"></a>一、解决大转盘清晰度</h5><ol><li><p>方案1：该方案出自<a href="https://www.jianshu.com/p/2cd5143cf9aa" target="_blank" rel="noopener">@boluobanana的简书文章</a>，非常感谢大佬。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Writes an image into a canvas taking into</span></span><br><span class="line"><span class="comment"> * account the backing store pixel ratio and</span></span><br><span class="line"><span class="comment"> * the device pixel ratio.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author Paul Lewis</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; opts The params for drawing an image to the canvas</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawImage</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!opts.canvas) &#123;</span><br><span class="line">        <span class="keyword">throw</span>(<span class="string">"A canvas is required"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!opts.image) &#123;</span><br><span class="line">        <span class="keyword">throw</span>(<span class="string">"Image is required"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the canvas and context</span></span><br><span class="line">    <span class="keyword">var</span> canvas = opts.canvas,</span><br><span class="line">        context = canvas.getContext(<span class="string">'2d'</span>),</span><br><span class="line">        image = opts.image,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now default all the dimension info</span></span><br><span class="line">        srcx = opts.srcx || <span class="number">0</span>,</span><br><span class="line">        srcy = opts.srcy || <span class="number">0</span>,</span><br><span class="line">        srcw = opts.srcw || image.naturalWidth,</span><br><span class="line">        srch = opts.srch || image.naturalHeight,</span><br><span class="line">        desx = opts.desx || srcx,</span><br><span class="line">        desy = opts.desy || srcy,</span><br><span class="line">        desw = opts.desw || srcw,</span><br><span class="line">        desh = opts.desh || srch,</span><br><span class="line">        auto = opts.auto,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// finally query the various pixel ratios</span></span><br><span class="line">        devicePixelRatio = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// backingStoreRatio此属性已被弃用</span></span><br><span class="line">        <span class="comment">//  backingStoreRatio = context.webkitBackingStorePixelRatio ||</span></span><br><span class="line">        context.mozBackingStorePixelRatio ||</span><br><span class="line">            context.msBackingStorePixelRatio ||</span><br><span class="line">            context.oBackingStorePixelRatio ||</span><br><span class="line">            context.backingStorePixelRatio || <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ratio = devicePixelRatio / backingStoreRatio;</span></span><br><span class="line">            ratio = devicePixelRatio;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ensure we have a value set for auto.</span></span><br><span class="line">    <span class="comment">// If auto is set to false then we</span></span><br><span class="line">    <span class="comment">// will simply not upscale the canvas</span></span><br><span class="line">    <span class="comment">// and the default behaviour will be maintained</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> auto === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        auto = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// upscale the canvas if the two ratios don't match</span></span><br><span class="line">    <span class="comment">// if (auto &amp;&amp; devicePixelRatio !== backingStoreRatio) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (auto &amp;&amp; devicePixelRatio) &#123;</span><br><span class="line">        <span class="keyword">var</span> oldWidth = canvas.width;</span><br><span class="line">        <span class="keyword">var</span> oldHeight = canvas.height;</span><br><span class="line"></span><br><span class="line">        canvas.width = oldWidth * ratio;</span><br><span class="line">        canvas.height = oldHeight * ratio;</span><br><span class="line"></span><br><span class="line">        canvas.style.width = oldWidth + <span class="string">'px'</span>;</span><br><span class="line">        canvas.style.height = oldHeight + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now scale the context to counter</span></span><br><span class="line">        <span class="comment">// the fact that we've manually scaled</span></span><br><span class="line">        <span class="comment">// our canvas element</span></span><br><span class="line">        context.scale(ratio, ratio);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    context.drawImage(pic, srcx, srcy, srcw, srch, desx, desy, desw, desh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方案2：精简版代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getPixelRatio = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> backingStore = context.backingStorePixelRatio ||</span><br><span class="line">        context.webkitBackingStorePixelRatio ||</span><br><span class="line">        context.mozBackingStorePixelRatio ||</span><br><span class="line">        context.msBackingStorePixelRatio ||</span><br><span class="line">        context.oBackingStorePixelRatio ||</span><br><span class="line">        context.backingStorePixelRatio || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>) / backingStore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ratio = getPixelRatio(context);</span><br><span class="line"><span class="keyword">let</span> fontSize = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>].style.fontSize.split(<span class="string">"px"</span>)[<span class="number">0</span>] || <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">canvas.style.width = canvas.width / fontSize + <span class="string">'rem'</span>;</span><br><span class="line">canvas.style.height = canvas.height / fontSize + <span class="string">'rem'</span>;</span><br><span class="line"></span><br><span class="line">canvas.width = canvas.width * ratio;</span><br><span class="line">canvas.height = canvas.height * ratio;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放大倍数</span></span><br><span class="line">context.scale(ratio, ratio);</span><br></pre></td></tr></table></figure><p> 以上两个方案均能解决<code>canvas</code>在高分屏上绘制出现模糊的问题。</p></li></ol><h5 id="二、预加载盘面图片"><a href="#二、预加载盘面图片" class="headerlink" title="二、预加载盘面图片"></a>二、预加载盘面图片</h5><p>在canvas中有多种加载图片的方式，常用的有以下两种方式：</p><ol><li><p>方式一：通过<code>new Image()</code>声明一个<code>Image</code>对象，并通过<code>src</code>设置图片路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个Image()对象</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Image对象的src</span></span><br><span class="line">img.src = <span class="string">"path/icon.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在canvas中绘制图片</span></span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, imageWidth, imageHeight);</span><br></pre></td></tr></table></figure></li><li><p>方式二：首先通过<code>&lt;img&gt;</code>标签向<code>html</code>中插入一张图片，然后使用<code>getElementById</code>获取这个<code>img</code>元素，再执行绘图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在html页面中插入img元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">src</span>=<span class="string">"path/icon.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面中的html元素</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在canvas中绘制图片</span></span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, imageWidth, imageHeight);</span><br></pre></td></tr></table></figure></li></ol><p>讲到这里，有必要提一下这里碰到的一个问题，通过方式一在<code>canvas</code>中绘图一张图片时，发现并不能成功绘制，而通过方式二绘制的时候却能正常显示。</p><p>这是因为<code>canvas</code>在绘制图片的时候需要 <font color="red">等图片加载成功之后才可以进行绘制，<code>drawImage()</code>这个方法在图片未加载完成的时候是不会被调用的，所以导致了绘图失败。</font></p><p>我们该如何解决这个问题呢？我百度并尝试了多种方式，最后总结了三种方法用于解决这个问题：</p><ol><li><p>方法一：<code>&lt;img&gt;</code>标签和<code>window.onload</code>配合使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript代码</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context.drawImage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在后期插入标签：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">img.src = <span class="string">"path"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br></pre></td></tr></table></figure></li><li><p>方法二：使用<code>定时器setTimeout()</code>异步实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>延迟时间需要根据不同的情况设定，所以用定时器去解决这个方案是有弊端的，不能保证定时器时间到了之后图片能正常加载，若出现网络较差的情况还是会遇到无法加载的情况。</p></blockquote></li><li><p>方式三：使用<code>img.onload</code>监听图片加载结束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'图片加载成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>onload</code>监听<code>img</code>的加载，加载结束之后再执行图片的绘制，目前最靠谱的方式就是这个。</p><p>需要注意的是<code>onload</code>是一个异步任务。</p></blockquote><p>我使用的是<code>img</code>标签加<code>onload</code>监听图片加载的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"path"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript代码</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>); <span class="comment">//获取img</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//监听img是否加载结束</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'图片加载成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    context.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height); <span class="comment">//绘制图片</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="三、大转盘盘面相关修改"><a href="#三、大转盘盘面相关修改" class="headerlink" title="三、大转盘盘面相关修改"></a>三、大转盘盘面相关修改</h5><ol><li><p>去掉<a href="https://github.com/muzqi" target="_blank" rel="noopener">@木子七</a>大佬原来的触发按钮以及使用<code>canvas</code>绘制的指针，并添加一个透明的<code>div</code>用于给用户”点击”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"canvas-main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"spin_button"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是一个透明的“点击”按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"spin_button_mask"</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">click</span>=<span class="string">"clickBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize1"</span> <span class="attr">src</span>=<span class="string">"prize01.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize2"</span> <span class="attr">src</span>=<span class="string">"prize02.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize3"</span> <span class="attr">src</span>=<span class="string">"prize03.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize4"</span> <span class="attr">src</span>=<span class="string">"prize04.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize5"</span> <span class="attr">src</span>=<span class="string">"prize05.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize6"</span> <span class="attr">src</span>=<span class="string">"prize06.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"prize7"</span> <span class="attr">src</span>=<span class="string">"prize07.png"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"pointer-red"</span> <span class="attr">src</span>=<span class="string">"red-pointer.png"</span> <span class="attr">width</span>=<span class="string">"158"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"pointer-gray"</span> <span class="attr">src</span>=<span class="string">"gray-pointer.png"</span> <span class="attr">width</span>=<span class="string">"158"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在&lt;canvas&gt;标签中添加文字说明，用于当浏览器不兼容canvas标签的时候的提示 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载转盘奖品图片和按钮图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---- 加载所有图片，目前是写死用的，可以删除</span></span><br><span class="line"><span class="comment">// 因为onload是异步操作，故每加载一张图片则令imgFlag加一，当imgFlag === 9的时候说明9张图片加载完毕，    此时可以开始绘制转盘</span></span><br><span class="line"><span class="comment">// 加载按钮图片</span></span><br><span class="line"><span class="keyword">let</span> btn_img_red = <span class="built_in">document</span>.getElementById(<span class="string">`pointer-red`</span>);</span><br><span class="line"><span class="keyword">let</span> btn_img_gray = <span class="built_in">document</span>.getElementById(<span class="string">`pointer-gray`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgFlag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> imgs = []; <span class="comment">//此数组用于暂存奖品图片</span></span><br><span class="line"></span><br><span class="line">awards.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123; <span class="comment">//遍历奖品数组并加载奖品图片</span></span><br><span class="line">    <span class="keyword">if</span> (item.img) &#123;</span><br><span class="line">        <span class="keyword">let</span> imgObj = <span class="built_in">document</span>.getElementById(<span class="string">`prize<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>`</span>);</span><br><span class="line">        imgs.push(imgObj);</span><br><span class="line">        imgObj.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            imgFlag++;</span><br><span class="line">            <span class="keyword">if</span> (imgFlag &gt;= <span class="number">9</span>) &#123; <span class="comment">//判断一共9张图片是否全部加载完毕</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"开始绘制盘面"</span>);</span><br><span class="line">                drawRouletteWheel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        imgs.push(<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn_img_red.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imgFlag++;</span><br><span class="line">    <span class="keyword">if</span> (imgFlag &gt;= <span class="number">9</span>) &#123; <span class="comment">//判断一共9张图片是否全部加载完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"开始绘制盘面"</span>);</span><br><span class="line">        drawRouletteWheel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">btn_img_gray.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imgFlag++;</span><br><span class="line">    <span class="keyword">if</span> (imgFlag &gt;= <span class="number">9</span>) &#123; <span class="comment">//判断一共9张图片是否全部加载完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"开始绘制盘面"</span>);</span><br><span class="line">        drawRouletteWheel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>绘制盘面相关内容，如奖品名称、奖品价格、奖品略缩图等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绘制转盘</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawRouletteWheel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ----- ① 清空页面元素，用于逐帧动画</span></span><br><span class="line">    context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="comment">// -----</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; awards.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> _startRadian = startRadian + awardRadian * i, <span class="comment">// 每一个奖项所占的起始弧度</span></span><br><span class="line">            _endRadian = _startRadian + awardRadian; <span class="comment">// 每一个奖项的终止弧度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----- ② 使用非零环绕原则，绘制圆盘</span></span><br><span class="line">        context.save();</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            context.fillStyle = <span class="string">"#ffedee"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.fillStyle = <span class="string">"#ffffff"</span></span><br><span class="line">        &#125;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.arc(canvas.width / <span class="number">2</span> / ratio, canvas.height / <span class="number">2</span> / ratio, OUTSIDE_RADIUAS, _startRadian, _endRadian, <span class="literal">false</span>);</span><br><span class="line">        context.arc(canvas.width / <span class="number">2</span> / ratio, canvas.height / <span class="number">2</span> / ratio, INSIDE_RADIUAS, _endRadian, _startRadian, <span class="literal">true</span>);</span><br><span class="line">        context.fill();</span><br><span class="line">        context.restore();</span><br><span class="line">        <span class="comment">// -----</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----- ③ 绘制文字</span></span><br><span class="line">        context.save();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (awards[i].img) &#123;</span><br><span class="line">            context.font = _this.fontSize + <span class="string">"px bold"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.font = _this.fontSize + <span class="number">4</span> + <span class="string">"px bold"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.fillStyle = <span class="string">"#5e5d5d"</span>;</span><br><span class="line"></span><br><span class="line">        context.translate(</span><br><span class="line">            CENTER_X + <span class="built_in">Math</span>.cos(_startRadian + awardRadian / <span class="number">2</span>) * TEXT_RADIUAS,</span><br><span class="line">            CENTER_Y + <span class="built_in">Math</span>.sin(_startRadian + awardRadian / <span class="number">2</span>) * TEXT_RADIUAS</span><br><span class="line">        );</span><br><span class="line">        context.rotate(_startRadian + awardRadian / <span class="number">2</span> + <span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制图片，默认奖品在偶数位</span></span><br><span class="line">        <span class="keyword">if</span> (awards[i].img &amp;&amp; imgs[i]) &#123;</span><br><span class="line">            <span class="comment">// context.drawImage(bgImg, -context.measureText(awards[i].name).width / 2,0,50,50);</span></span><br><span class="line">            context.drawImage(imgs[i], <span class="number">-25</span>, <span class="number">-65</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 名称 当奖品带有图片的时候调整字体绘制位置和大小等相关属性</span></span><br><span class="line">        <span class="keyword">if</span> (awards[i].img) &#123;</span><br><span class="line">            <span class="keyword">if</span> (awards[i].AwardName.length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                context.fillText(awards[i].AwardName, -context.measureText(awards[i].AwardName).width / <span class="number">2</span>, <span class="number">-5</span> * (awards[i].AwardName.length - <span class="number">10</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                context.fillText(awards[i].AwardName, -context.measureText(awards[i].AwardName).width / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.fillText(awards[i].AwardName, -context.measureText(awards[i].AwardName).width / <span class="number">2</span>, <span class="number">-20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 价格</span></span><br><span class="line">        <span class="keyword">if</span> (awards[i].MdseAmount) &#123;</span><br><span class="line">            context.fillText(awards[i].MdseAmount, -context.measureText(awards[i].MdseAmount).width / <span class="number">2</span>, <span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        context.restore();</span><br><span class="line">        <span class="comment">// -----</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----④绘制按钮</span></span><br><span class="line">    <span class="keyword">if</span> (!_this.disabled) &#123; <span class="comment">//disabled是控制"开始旋转"按钮是否可以点击的参数，当可以点击的时候绘制红色的按钮，当不可点击的时候绘制灰色的按钮</span></span><br><span class="line">        context.drawImage(btn_img_red, canvas.width / <span class="number">2</span> / ratio - btn_img_red.width / <span class="number">2</span> / ratio * <span class="number">1.5</span>, canvas.height / <span class="number">2</span> / ratio - btn_img_red.height / <span class="number">2</span> / ratio * <span class="number">1.5</span>, btn_img_red.width / ratio * <span class="number">1.5</span>, btn_img_red.height / ratio * <span class="number">1.5</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context.drawImage(btn_img_gray, canvas.width / <span class="number">2</span> / ratio - btn_img_gray.width / <span class="number">2</span> / ratio * <span class="number">1.5</span>, canvas.height / <span class="number">2</span> / ratio - btn_img_gray.height / <span class="number">2.5</span> / ratio * <span class="number">1.5</span>, btn_img_gray.width / ratio * <span class="number">1.5</span>, btn_img_gray.height / ratio * <span class="number">1.25</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -----</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----- ④ 绘制指针 因指针使用自定义的按钮，并绘制在图片上，故原绘制指针的方法删除</span></span><br><span class="line">    <span class="comment">// context.save();</span></span><br><span class="line">    <span class="comment">// context.beginPath();</span></span><br><span class="line">    <span class="comment">// context.moveTo(CENTER_X, CENTER_Y - OUTSIDE_RADIUAS + 8);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X - 10, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X - 4, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X - 4, CENTER_Y - OUTSIDE_RADIUAS - 10);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X + 4, CENTER_Y - OUTSIDE_RADIUAS - 10);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X + 4, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.lineTo(CENTER_X + 10, CENTER_Y - OUTSIDE_RADIUAS);</span></span><br><span class="line">    <span class="comment">// context.closePath();</span></span><br><span class="line">    <span class="comment">// context.fill();</span></span><br><span class="line">    <span class="comment">// context.restore();</span></span><br><span class="line">    <span class="comment">// -----</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开始旋转触发方法修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 开始旋转</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateWheel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当 当前时间 大于 总时间，停止旋转，并返回当前值</span></span><br><span class="line">    spinningTime += <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">if</span> (spinningTime &gt;= spinTotalTime) &#123;</span><br><span class="line">        _this.disabled = <span class="literal">false</span>;</span><br><span class="line">        _this.$emit(<span class="string">'end'</span>); <span class="comment">//当转盘停止转动的时候触发end回调</span></span><br><span class="line">        drawRouletteWheel(); <span class="comment">//当结束的时候重新绘制一次转盘，保证按钮是可转动的状态对应的按钮</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _this.disabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> _spinningChange = (spinningChange - easeOut(spinningTime, <span class="number">0</span>, spinningChange, spinTotalTime)) * (<span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line">    startRadian += _spinningChange;</span><br><span class="line"></span><br><span class="line">    drawRouletteWheel();</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(rotateWheel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听点击事件，开始旋转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">_this.$refs[<span class="string">"spin_button"</span>].addEventListener(<span class="string">"click"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_this.disable) &#123; <span class="comment">//控制抽奖次数的参数</span></span><br><span class="line">        <span class="keyword">if</span> (!_this.disabled) &#123; <span class="comment">//控制是否重复点击的参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取奖品在数组中的下标</span></span><br><span class="line">            <span class="keyword">if</span> (getIndex() !== <span class="literal">false</span>) &#123;</span><br><span class="line">                listIndex = getIndex();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">"请确定中奖奖品是否在奖品列表中"</span>);</span><br><span class="line">                _this.clear = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getIndex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> i = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">let</span> notWonIndex = <span class="literal">null</span>;</span><br><span class="line">                _this.list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.AwardNo) &#123;</span><br><span class="line">                        <span class="comment">// if (_this.prize === item.AwardNo) &#123;</span></span><br><span class="line">                        <span class="comment">//   i = index;</span></span><br><span class="line">                        <span class="comment">// &#125; else if (item.AwardNo === "MDSE999999999999999") &#123;</span></span><br><span class="line">                        <span class="comment">//   notWonIndex = index;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (_this.prize === item.AwardNo) &#123;</span><br><span class="line">                            i = index;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            notWonIndex = index;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.warn(<span class="string">"请确认奖品编号字段是否存在"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (!notWonIndex) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.warn(<span class="string">"奖品编号不存在，自动设置为谢谢参与"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> notWonIndex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取中奖奖品旋转的起始角度</span></span><br><span class="line">            turnStartRadian = awardRadian * listIndex; <span class="comment">// 获取中奖奖品的起始角度</span></span><br><span class="line">            turnEndRadian = awardRadian * listIndex + awardRadian; <span class="comment">// 获取中奖奖品的结束角度</span></span><br><span class="line"></span><br><span class="line">            spinningTime = <span class="number">0</span>; <span class="comment">// 初始化当前时间</span></span><br><span class="line">            startRadian = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 初始化弧度</span></span><br><span class="line">            spinTotalTime = <span class="number">5</span> * <span class="number">1000</span>; <span class="comment">// 随机定义一个时间总量</span></span><br><span class="line"></span><br><span class="line">            prizeAngle = awardRadian * <span class="number">180</span> / <span class="built_in">Math</span>.PI * <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>) / <span class="number">10</span>; <span class="comment">//该参数是确定奖品的对应角度(360°内)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prizeAngle &gt; <span class="number">0.7</span> * (<span class="number">360</span> / _this.list.length)) &#123;</span><br><span class="line">                prizeAngle = <span class="number">0.7</span> * (<span class="number">360</span> / _this.list.length)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prizeAngle &lt; <span class="number">0.3</span> * (<span class="number">360</span> / _this.list.length)) &#123;</span><br><span class="line">                prizeAngle = <span class="number">0.3</span> * (<span class="number">360</span> / _this.list.length)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            spinningChange = (turnStartRadian * <span class="number">180</span> / <span class="built_in">Math</span>.PI - <span class="number">90</span> * (listIndex + <span class="number">1</span>) % <span class="number">360</span> - prizeAngle + <span class="number">360</span> * turns) / <span class="number">124.5</span>; <span class="comment">//根据相应的角度算出大转盘的旋转速率，保证转盘停止转动的时候能落在我们想落在的位置</span></span><br><span class="line">            </span><br><span class="line">            rotateWheel();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'请勿重复点击'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'今日抽奖次数已用完'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上的修改均在<code>vue</code>的<code>mounted</code>生命周期之内进行，此时需要进行相应的修改，整个vue组件大概结构如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">"Lottery"</span>,</span><br><span class="line">props: &#123;</span><br><span class="line">  <span class="comment">// 获取数组</span></span><br><span class="line">  disable: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 盘面奖品list</span></span><br><span class="line">  list: &#123;</span><br><span class="line">    type: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!val || val.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"请确认转盘盘面奖项列表"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置中奖奖项</span></span><br><span class="line">  prize: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置奖品字体</span></span><br><span class="line">  fontSize: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 设置旋转圈数</span></span><br><span class="line">  turns: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">5</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 控制转盘转动</span></span><br><span class="line">  run: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    disabled: <span class="literal">false</span>, <span class="comment">//控制大转盘是否可以点击</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>; <span class="comment">//将vue的this值赋予_this，目的是防止之后this被污染导致获取不到正确的值</span></span><br><span class="line">    <span class="comment">// ......对应的代码</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  run(val) &#123; <span class="comment">//监听run的变化，当run变化的时候触发spin_button的click事件</span></span><br><span class="line">    <span class="keyword">if</span> (val &amp;&amp; !<span class="keyword">this</span>.disabled) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs[<span class="string">"spin_button"</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 点击按钮遮罩</span></span><br><span class="line">  clickBtn() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.run &amp;&amp; !<span class="keyword">this</span>.disabled) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"开始旋转"</span>);</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'start'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"请勿重复点击"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="四、效果图"><a href="#四、效果图" class="headerlink" title="四、效果图"></a>四、效果图</h5><p><img src="/2019/02/26/components/LotteryComponent/Lottery/lottery.gif" alt="大转盘效果图"></p><p>本文部分内容转载自<a href="https://github.com/muzqi" target="_blank" rel="noopener">@木子七</a>的<a href="https://juejin.im/post/5992b6065188257dd3664dbc" target="_blank" rel="noopener">大转盘文章</a></p>]]></content>
      
      
      <categories>
          
          <category> vue组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise对象学习</title>
      <link href="/2019/02/26/JavaScript/PromiseStudy/Promise/"/>
      <url>/2019/02/26/JavaScript/PromiseStudy/Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise学习"><a href="#Promise学习" class="headerlink" title="Promise学习"></a>Promise学习</h1><h5 id="一、回调函数的问题"><a href="#一、回调函数的问题" class="headerlink" title="一、回调函数的问题"></a>一、回调函数的问题</h5><p>学过 JavaScript 的人都应该清楚一件事，JavaScript语言的一大特点就是<code>单线程</code>，目的是为了提高效率。因此在 JavaScript 中回调函数不会立即执行，而是由事件轮询去检测事件是否执行完毕，当执行完毕并且有结果之后，将执行结果放入回调函数中，然后将回调函数添加到事件队列中等待被执行。</p><p>在这里会有一些关于回调函数的问题：</p><ol><li>“回调地狱”：即“洋葱模型”，回调函数作为异步函数的参数，会形成多级的嵌套，当嵌套级数过多时，代码逻辑会变得混乱，无法将错误的捕捉和处理这个简单的工作做好，只能在回调函数的内部通过<code>try{}...catch(){}</code>捕获并处理异常。</li><li>回调函数的执行方式不符合自然语言的线性思维方式，不易理解。</li><li>控制反转，即控制权不在我们手中，而是在其他人的代码中。例如该异步函数是第三方库，当我们把回调函数传给第三方库的时候，我们并不能知道我们的异步函数在第三方库里做了什么，在调用回调函数之前做了什么。</li></ol><p>解决回调函数的问题有很多种方法，其中比较好的一种方式就是使用 Promise 对象。</p><h5 id="二、什么是Promise"><a href="#二、什么是Promise" class="headerlink" title="二、什么是Promise"></a>二、什么是Promise</h5><p>Promise 是目前在 JavaScript 异步编程中比较流行的解决方案之一，Promise 用于表示一个异步操作的最终状态（完成或者失败），并且可以链式的处理异步请求（<code>.then()</code>方法），很好的处理异常问题，是解决回调地狱的良好方案之一。MDN对 Promise 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener">解释</a>如下：</p><blockquote><p><code>Promise</code> 对象是一个代理对象（代理一个值），被代理的值在 <code>Promise</code>对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的 <code>promise</code>对象。</p></blockquote><h5 id="三、Promise-的状态"><a href="#三、Promise-的状态" class="headerlink" title="三、Promise 的状态"></a>三、Promise 的状态</h5><p>Promise 一共包含有三种状态：</p><ol><li><code>pending</code>：初始状态，既不是成功状态，也不是失败状态，在网上多数人称为<code>等待中</code>状态。</li><li><code>fulfilled</code>：成功状态，意味着操作成功完成。</li><li><code>rejected</code>：失败状态，意味着操作失败。</li></ol><p>Promise 无论如何都会返回一个结果，不是成功，就是失败。并且 Promise 的设计具有原子性，即当状态从<code>pending</code>状态转变为<code>fulfilled</code>状态或者<code>rejected</code>状态后，将不能改变。</p><p>在<code>pending</code>状态中，Promise 可能触发<code>fulfilled</code>状态并将成功结果传递给相应的状态处理方法，也可能触发<code>rejected</code>状态并将失败信息返回。</p><p><img src="/2019/02/26/JavaScript/PromiseStudy/Promise/promises.png" alt="图源自[@MDN的Promise文档](https://mdn.mozillademos.org/files/8633/promises.png)"></p><p>(图片来自<a href="https://mdn.mozillademos.org/files/8633/promises.png" target="_blank" rel="noopener">@MDN</a>)</p><h5 id="四、Promise-的原理"><a href="#四、Promise-的原理" class="headerlink" title="四、Promise 的原理"></a>四、Promise 的原理</h5><p>从本文前面的内容中可知 Promise 有三个状态，并且会返回一个成功或者失败的结果。</p><p><img src="/2019/02/26/JavaScript/PromiseStudy/Promise/0.png" alt="图源来自[《JS异步编程之Promise》](https://juejin.im/post/5c724f14518825626b76f6d5)"></p><p>(图来自于<a href="https://juejin.im/post/5c724f14518825626b76f6d5" target="_blank" rel="noopener">https://juejin.im/post/5c724f14518825626b76f6d5</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Promise构造器执行"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            resolve(<span class="string">"成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">"失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// return Promise.resolve(1);  // 返回一个决议为成功的 Promise 实例</span></span><br><span class="line">    <span class="comment">// return Promise.reject("error");  // 返回一个决议为拒绝的 Promise 实例</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// .then() 方法会返回一个 Promise, 完成调用的参数为前一个 Promise 的返回值或者决议值。</span></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"抛出错误"</span>); <span class="comment">// 抛出错误是隐式拒绝</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Continue to do other things</span></span><br><span class="line">&#125;)</span><br><span class="line">.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"finally"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="五、Promise-的语法"><a href="#五、Promise-的语法" class="headerlink" title="五、Promise 的语法"></a>五、Promise 的语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;...&#125; <span class="comment">/* executor */</span>  );</span><br></pre></td></tr></table></figure><p>参数：</p><p><code>executor</code>：</p><ul><li><code>executor</code>函数带有<code>resolve</code>和<code>reject</code>两个参数。当 Promise 构造函数在执行时会<strong>立即调用</strong><code>executor</code>函数，<code>executor</code>函数在 Promise 构造函数返回新建对象之前会被调用，并将<code>resolve</code>和<code>reject</code>两个函数作为参数传递给<code>executor</code>函数。在<code>executor</code>函数内部通常会执行一些异步操作，并在异步操作完成时调用<code>resolve</code>函数或者<code>reject</code>函数将 promise 的状态修改为<code>fulfilled(成功)</code>或者<code>rejected(失败)</code></li><li>只要在<code>executor</code>函数中抛出一个错误，promise 的状态就会转换为<code>rejected</code>，此时<code>executor</code>函数的返回值将会被忽略。</li></ul><h5 id="六、Promise-的属性"><a href="#六、Promise-的属性" class="headerlink" title="六、Promise 的属性"></a>六、Promise 的属性</h5><ul><li><p><code>Promise.length</code>：</p><p> Promise 的 length 属性，其值始终为 1，即构造器参数的数目。</p></li><li><p><code>Promise.prototype</code>：</p><p> Promise 构造器的原型。</p></li></ul><h5 id="七、Promise-的方法"><a href="#七、Promise-的方法" class="headerlink" title="七、Promise 的方法"></a>七、Promise 的方法</h5><ul><li><p><code>Promise.all(iterable)</code>：</p><p>当 promise 对象中 iterable 参数对象里所有的 promise 对象都成功执行的时候触发的一个方法，若 iterable 中有任何一个 promise 对象执行失败则会立即触发该 promise 对象的失败。该方法在触发成功状态之后，会将 iterable 参数里所有 promise 对象返回值放入一个数组中并将该数组作为成功回调的返回值，该数组中各个 promise 对象的返回值顺序与 iterable 的顺序保持一致。如果触发了失败状态，则该方法会将第一个触发失败状态的 promise 对象的错误信息作为它的错误信息返回。该方法常用于处理多个 promise 对象的状态合集。</p></li><li><p><code>Promise.race(iterable)</code>：</p><p>iterable 参数中只要有一个 promise 对象触发了额成功状态或者失败状态，就会将该 promise 对象的值作为它的返回值。</p></li><li><p><code>Promise.reject(reason)</code>：</p><p>返回一个状态为失败的 Promise 对象，并将给定的失败信息传递给对应的处理方法。</p></li><li><p><code>Promise.resolve(value)</code>：</p></li></ul><blockquote><p>返回一个状态由给定 value 决定的 Promise 对象。如果该值是一个 Promise 对象，则直接返回该对象；如果该值是 thenable (即，带有<code>.then()</code>方法的对象)，返回的 Promise 对象的最终状态由<code>.then()</code>方法执行决定；否则的话(该 value 为空，基本类型或者不带<code>.then()</code>方法的对象)，返回的 Promise 对象状态为<code>fulfilled</code>，并且将该 value 传递给对应的<code>.then()</code>方法。通常而言，如果你不知道一个值是否是 Promise 对象，使用<code>Promise.resolve(value)</code> 来返回一个 Promise 对象,这样就能将该 value 以 Promise 对象形式使用。</p></blockquote><h5 id="八、Promise-的原型"><a href="#八、Promise-的原型" class="headerlink" title="八、Promise 的原型"></a>八、Promise 的原型</h5><ul><li><p>属性：</p><ul><li><p><code>Promise.prototype.construtor</code>：</p><p>返回被创建的实例函数.  默认为 Promise 函数。</p></li></ul></li><li><p>方法：</p><ul><li><p><code>Promise.prototype.catch(onRejected)</code>：</p><p>当<code>.then()</code>方法中发生错误时，<code>.catch()</code>方法会捕获并处理错误，并将一个<code>rejection(拒绝)</code>回调到当前的 promise，然后返回一个新的 promise。新的 promise 以<code>.catch()</code>的返回值来 resolve。</p></li><li><p><code>Promise.prototype.then(onFulfilled, onRejected)</code>：</p><p>在当前的 promise 中添加<code>fulfilled(解决)</code>回调和<code>rejuection(拒绝)</code>回调，并以回调的返回值来 resolve。</p></li><li><p><code>Promise.prototype.finally(onFinally)</code>：</p><p>无论 promise 的状态是处于<code>fulfilled(成功)</code>状态还是<code>rejected(失败)</code>状态，都会调用的一个方法，并且在该回调中返回一个新的 promise 对象。</p></li></ul></li></ul><h5 id="九、Promise-的优势"><a href="#九、Promise-的优势" class="headerlink" title="九、Promise 的优势"></a>九、Promise 的优势</h5><ol><li><p>链式调用：</p><p>Promise 在使用后会返回一个新的 Promise 便于我们传递状态参数。同时因为其链式的写法更接近于同步写法，更加符合线性思维。</p></li><li><p>错误捕捉：</p><p>Promise 能够为链式异步调用提供错误处理。</p></li><li><p>控制权的再次反转：</p><p>第三方提供的异步函数我们无法保证回调函数如何被执行，但是通过 Promise 我们能够保证 resolve 只会执行一次，并且 Promise 始终以异步的形式执行。</p></li><li><p>解决未决议和并行嵌套的问题：</p><p>Promise 的<code>Promise.all(iterable)</code>方法和<code>Promise.race(iterable)</code>方法可以用于解决 Promise 始终未决议和并行 Promise 嵌套的问题。</p></li></ol><h5 id="十、Promise对象的不足"><a href="#十、Promise对象的不足" class="headerlink" title="十、Promise对象的不足"></a>十、Promise对象的不足</h5><ol><li><p>每个<code>.then()</code>方法都是一个独立的作用域：</p><p>当我们加入多个<code>.then()</code>方法时，会创建多个独立的作用域，要想解决作用域的数据共享问题需要在外层包裹一层函数作用域实现闭包。</p></li><li><p><code>.then()</code>无法取消：</p><p><code>.catch()</code>能捕获并处理 Promise 链中任意一个<code>.then()</code>方法中的错误，但是不会中断整个 Promise 链的执行。</p></li><li><p>无法得知进度：</p><p>Promise 只会从<code>pending</code>状态转变为<code>fullfilled</code>状态或者<code>rejected</code>状态，所以我们无法得知<code>pending</code>阶段的进度。</p></li></ol><h5 id="十一、应用-Promise-的简单例子"><a href="#十一、应用-Promise-的简单例子" class="headerlink" title="十一、应用 Promise 的简单例子"></a>十一、应用 Promise 的简单例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Promise 对ajax进行封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">method, url, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">var</span> method = method || <span class="string">"GET"</span>;</span><br><span class="line">        <span class="keyword">var</span> data = data || <span class="literal">null</span>;</span><br><span class="line">        xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                resolve(xhr.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(xhr.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send(data);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">fetch(<span class="string">"GET"</span>, <span class="string">"/api"</span>, <span class="literal">null</span>)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 nodejs error first 风格回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       fs.readFile(url,<span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(data)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h6 id="参考资料（排名不分先后顺序）"><a href="#参考资料（排名不分先后顺序）" class="headerlink" title="参考资料（排名不分先后顺序）"></a>参考资料（排名不分先后顺序）</h6><ol><li><a href="https://juejin.im/post/5c724f14518825626b76f6d5" target="_blank" rel="noopener">@南波的《JS异步编程之Promise》</a></li><li><a href="https://juejin.im/post/5c691ef851882562c0496759" target="_blank" rel="noopener">@南波的《JS异步编程之callback》</a></li><li><a href="https://juejin.im/post/5c71927c6fb9a049cd54d2de" target="_blank" rel="noopener">@蟹丸的《前端异步技术之Promise》</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">MDN的Promise文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
